`Original POS File Location` <- c("006_full.pos")
`Indexed Cluster Pos File` <- c("006_full.cluster.indexed")
`Indexed Cluster Range File` <- c("Indexed Cluster Range File.rrng")
`Atomic Density of Material` <- 84.59 # Atomic density of BCC Fe is ~ 85.49 atoms/nm3
`Detection Efficiency of LEAP` <- 0.37 # Detection efficiency of reflectron LEAP 3000 ~ 0.37, reflectron LEAP 5000 ~ 0.52
SamplingFraction <- 0.005 #
AlphaNND <- 2
# Imports csv
skip = 10)
# Run this function to generate dataframes for further analyses
CSVInputConverter(ClusterCSVImport)
ClusterInformationConvertedCount
findEdgeClustersConvex("Test Files/006_full.pos",
"Test Files/006_full - Top-Level ROI - Cluster Analysis (Ni, Cu).csv",
"Test Files/006_full.cluster.indexed.pos",
"Test Files/006_full.cluster.pos",
SamplingFraction,
AlphaNND)
`Indexed Cluster Pos File` <- c("006_full.cluster.indexed.pos")
`Cluster Pos File` <- c("006_full.cluster.pos")
findEdgeClustersConvex(`Original POS File Location`,
`Cluster Analysis CSV`,
`Indexed Cluster Pos File`,
`Cluster Pos File`,
SamplingFraction,
AlphaNND)
source("Edge Cluster Detection.R")
findEdgeClustersConvex(`Original POS File Location`,
`Cluster Analysis CSV`,
`Indexed Cluster Pos File`,
`Cluster Pos File`,
SamplingFraction,
AlphaNND)
# View Alpha shape that is generated
plot(AlphaHullShape, indexAlpha = 1)
# Calculate number density (assuming correction factor of 0.5 and that alpha volume generated around point cloud is correct)
NumberDensity = (NumberClusters - (0.5 * NumberOfAssignedEdgeClusters))/
(volume_ashape3d(AlphaHullShape, byComponents = FALSE, indexAlpha = 1)*((10^-9)^3))
print(paste0("The number density of clusters in this dataset is: ", signif(NumberDensity,4)," clusters per m^3",
". A correction factor of 0.5 has been used and the following assumption has been made: the volume generated by alpha shape is the correct volume of your dataset."))
# Run this function to plot bar chart of cluster compositions - object will be named ClusterBarChart
# Set first object to "Y" if you want Fe concentration plotting - else set to "N"
# Second option allows you to choose how often labels appear on x-axis
ClusterBarChartPlot(FeLinePlot = "Y",
XAxisLabels = 5,
EdgeRemoval = "Y")
EdgeForExcelClusterImport
EdgeClusters
EdgeForExcelClusterImport
ClusterInfoForBarChart
EdgeClusterIdentities
ClusterInfoForBarChart$X
(ClusterInfoForBarChart %>% filter(!grepl("Matrix",X)))$X
ClusterInfoForBarChart %>%
spread(Element, `Concentration (at.%)`
)
EdgeClusterIdentities
cbind((ClusterInfoForBarChart %>% filter(!grepl("Matrix",X)))$X,
"Edge" = 2)
cbind("Cluster" = (ClusterInfoForBarChart %>% filter(!grepl("Matrix",X)))$X,
"Edge" = 2)
(ClusterInfoForBarChart %>% filter(!grepl("Matrix",X)))$X
cbind((ClusterInfoForBarChart %>% filter(!grepl("Matrix",X)))$X,
2)
ClusterInfoForBarChart
ClusterInfoForBarChart %>% filter(!grepl("Matrix",X))
ClusterInfoForBarChart %>%
spread(Element,`Concentration (at.%)`)
ClusterInfoForBarChart %>%
spread(Element, `Concentration (at.%)`)
EdgeForExcelClusterImport %>% mutate(Edge = ifelse(
match(EdgeForExcelClusterImport$ClusterID, TotalEdgeClusters),
"Edge",
""
))
EdgeClusters
ClusterInfoForBarChart %>%
spread(Element, `Concentration (at.%)`)
ClusterInfoForBarChart %>%
spread(Element, `Concentration (at.%)`) %>%
mutate(Edge = if_else(parse_number(as.character(X)) %in% c(1,2,3),"Y","N"))
ClusterInfoForBarChart %>%
spread(Element, `Concentration (at.%)`) %>%
mutate(Edge = if_else(parse_number(as.character(X)) %in% EdgeClusters,"Edge","N"))
ClusterInfoForBarChart %>%
spread(Element, `Concentration (at.%)`) %>%
mutate(Edge = if_else(parse_number(as.character(X)) %in% EdgeClusters,"Edge",""))
ClusterInfoForBarChart %>%
spread(Element, `Concentration (at.%)`) %>%
mutate(Edge = if_else(parse_number(as.character(X)) %in% EdgeClusters,"Edge",NA))
ClusterInfoForBarChart %>%
spread(Element, `Concentration (at.%)`) %>%
mutate(Edge = if_else(parse_number(as.character(X)) %in% EdgeClusters,"Edge",))
ClusterInfoForBarChart %>%
spread(Element, `Concentration (at.%)`) %>%
mutate(Edge = if_else(parse_number(as.character(X)) %in% EdgeClusters,"Edge",""))
ClusterInfoForBarChart <- ClusterInfoForBarChart %>%
spread(Element, `Concentration (at.%)`) %>%
mutate(Edge = if_else(parse_number(as.character(X)) %in% EdgeClusters,"Edge",""))
ClusterInfoForBarChart %>%
filter(is.na(Edge))
ClusterInfoForBarChart %>%
spread(Element, `Concentration (at.%)`) %>%
mutate(Edge = if_else(parse_number(as.character(X)) %in% EdgeClusters,"Edge",NA))
# Run this function to generate dataframes for further analyses
CSVInputConverter(ClusterCSVImport)
ClusterInfoForBarChart
ClusterInfoForBarChart %>%
spread(Element, `Concentration (at.%)`) %>%
mutate(Edge = if_else(parse_number(as.character(X)) %in% EdgeClusters,"Edge",NA))
ClusterInfoForBarChart %>%
spread(Element, `Concentration (at.%)`) %>%
mutate(Edge = if_else(parse_number(as.character(X)) %in% EdgeClusters,"Edge",1))
ClusterInfoForBarChart %>%
spread(Element, `Concentration (at.%)`) %>%
mutate(Edge = if_else(parse_number(as.character(X)) %in% EdgeClusters,"Edge","y"))
ClusterInfoForBarChart %>%
spread(Element, `Concentration (at.%)`) %>%
mutate(Edge = if_else(parse_number(as.character(X)) %in% EdgeClusters,"Edge",NA_character_))
ClusterInfoForBarChart <- ClusterInfoForBarChart %>%
spread(Element, `Concentration (at.%)`) %>%
mutate(Edge = if_else(parse_number(as.character(X)) %in% EdgeClusters,"Edge",NA_character_))
ClusterInfoForBarChart %>%
filter(is.na(Edge))
source("ClusterBarPlots.R")
# Run this function to plot bar chart of cluster compositions - object will be named ClusterBarChart
# Set first object to "Y" if you want Fe concentration plotting - else set to "N"
# Second option allows you to choose how often labels appear on x-axis
ClusterBarChartPlot(FeLinePlot = "Y",
XAxisLabels = 5,
EdgeRemoval = "Y")
ClusterInfoForBarChart %>%
spread(Element, `Concentration (at.%)`) %>%
mutate(Edge = if_else(parse_number(as.character(X)) %in% EdgeClusters,"Edge",NA_character_))
ClusterInfoForBarChart
require(tidyverse)
source("CSVConverter.R")
source("Edge Cluster Detection.R")
source("ClusterBarPlots.R")
source("TernaryPlots.R")
source("ClusterCalculator.R")
# Type the paths to your cluster analysis csv, pos file, and indexed range file
# Ensure that "/" in file path are re-written as "//" or "/"
`Cluster Analysis CSV` <- c("006_full - Top-Level ROI - Cluster Analysis (Ni, Cu).csv")
`Original POS File Location` <- c("006_full.pos")
`Indexed Cluster Pos File` <- c("006_full.cluster.indexed.pos")
`Cluster Pos File` <- c("006_full.cluster.pos")
`Indexed Cluster Range File` <- c("Indexed Cluster Range File.rrng")
`Atomic Density of Material` <- 84.59 # Atomic density of BCC Fe is ~ 85.49 atoms/nm3
`Detection Efficiency of LEAP` <- 0.37 # Detection efficiency of reflectron LEAP 3000 ~ 0.37, reflectron LEAP 5000 ~ 0.52
SamplingFraction <- 0.005 #
AlphaNND <- 2
# Imports csv
ClusterCSVImport <- read.csv(paste0(`Cluster Analysis CSV`),
skip = 10)
# Run this function to generate dataframes for further analyses
CSVInputConverter(ClusterCSVImport)
# This function will determine which clusters are on the edge of your dataset
# You need to decide whether to include these in cluster composition calculations
# They will not be included in cluster size calculations
# This function may take a minute or two to run. Lower sampling fractions should increase speed.
findEdgeClustersConvex(`Original POS File Location`,
`Cluster Analysis CSV`,
`Indexed Cluster Pos File`,
`Cluster Pos File`,
SamplingFraction,
AlphaNND)
ClusterInfoForBarChart %>%
spread(Element, `Concentration (at.%)`) %>%
mutate(Edge = if_else(parse_number(as.character(X)) %in% EdgeClusters,"Edge",NA_character_))
EdgeClusters
ClusterInfoForBarChart %>%
spread(Element, `Concentration (at.%)`) %>%
mutate(Edge = if_else(parse_number(as.character(X)) %in% EdgeClusters,"Edge",NA_character_))
# This function will determine which clusters are on the edge of your dataset
# You need to decide whether to include these in cluster composition calculations
# They will not be included in cluster size calculations
# This function may take a minute or two to run. Lower sampling fractions should increase speed.
findEdgeClustersConvex(`Original POS File Location`,
`Cluster Analysis CSV`,
`Indexed Cluster Pos File`,
`Cluster Pos File`,
SamplingFraction,
AlphaNND)
ClusterInfoForBarChart %>%
spread(Element, `Concentration (at.%)`) %>%
mutate(Edge = if_else(parse_number(as.character(X)) %in% EdgeClusters,"Edge",NA_character_))
# Run this function to plot bar chart of cluster compositions - object will be named ClusterBarChart
# Set first object to "Y" if you want Fe concentration plotting - else set to "N"
# Second option allows you to choose how often labels appear on x-axis
ClusterBarChartPlot(FeLinePlot = "Y",
XAxisLabels = 5,
EdgeRemoval = "Y")
# Run this function to plot a ternary plot showing ratio of Ni:Mn:Si for each cluster
# Option for plotting composition of edge clusters: "N" will plot edge clusters, "Y" will remove them from analyses
TernaryPlotFunction(EdgeRemoval = "Y")
EdgeClusterIdentities
ClusterInfoForBarChart %>%
spread(Element, `Concentration (at.%)`) %>%
mutate(Edge = if_else(parse_number(as.character(X)) %in% EdgeClusters,"Edge",NA_character_))
ClusterInfoForBarChart %>%
spread(Element, `Concentration (at.%)`) %>%
mutate(Edge = if_else(parse_number(as.character(X)) %in% EdgeClusters,"Edge",NA_character_)) %>%
filter(is.na(Edge)
)
ggtern(ClusterInfoForBarChart %>%
spread(Element, `Concentration (at.%)`) %>%
mutate(Edge = if_else(parse_number(as.character(X)) %in% EdgeClusters,"Edge",NA_character_)) %>%
filter(is.na(Edge)),
aes(Ni, Si, Mn)) +
geom_point(color = "red") + theme_bw() +
theme(text = element_text(size=20, colour = "black"),
panel.grid.major = element_line(colour = "black"),
axis.text = element_text(size=20, colour = "black", face="bold"),
plot.title = element_text(hjust = 0.5))+
theme(legend.position="right") +
guides(colour = guide_legend(ncol = 1),
shape = guide_legend(ncol = 2)) +
scale_shape_manual(values=seq(0,15))
ggtern(ClusterInfoForBarChart %>%
spread(Element, `Concentration (at.%)`) %>%
mutate(Edge = if_else(parse_number(as.character(X)) %in% EdgeClusters,"Edge",NA_character_)) %>%
filter(is.na(Edge)),
aes(Ni, Si, Mn)) +
geom_point(color = "red") + theme_bw() +
theme(text = element_text(size=20, colour = "black"),
panel.grid.major = element_line(colour = "black"),
axis.text = element_text(size=20, colour = "black", face="bold"),
plot.title = element_text(hjust = 0.5))+
theme(legend.position="right") +
guides(colour = guide_legend(ncol = 1),
shape = guide_legend(ncol = 2)) +
scale_shape_manual(values=seq(0,15))
ggtern(ClusterInfoForBarChart %>%
spread(Element, `Concentration (at.%)`) %>%
mutate(Edge = if_else(parse_number(as.character(X)) %in% EdgeClusters,"Edge",NA_character_)),
aes(Ni, Si, Mn)) +
geom_point(color = "red") + theme_bw() +
theme(text = element_text(size=20, colour = "black"),
panel.grid.major = element_line(colour = "black"),
axis.text = element_text(size=20, colour = "black", face="bold"),
plot.title = element_text(hjust = 0.5))+
theme(legend.position="right") +
guides(colour = guide_legend(ncol = 1),
shape = guide_legend(ncol = 2)) +
scale_shape_manual(values=seq(0,15))
ggtern(ClusterInfoForBarChart %>%
spread(Element, `Concentration (at.%)`) %>%
mutate(Edge = if_else(parse_number(as.character(X)) %in% EdgeClusters,"Edge",NA_character_)),
aes(Ni, Si, Mn)) +
geom_point(color = "red", size = 10) + theme_bw() +
theme(text = element_text(size=20, colour = "black"),
panel.grid.major = element_line(colour = "black"),
axis.text = element_text(size=20, colour = "black", face="bold"),
plot.title = element_text(hjust = 0.5))+
theme(legend.position="right") +
guides(colour = guide_legend(ncol = 1),
shape = guide_legend(ncol = 2)) +
scale_shape_manual(values=seq(0,15))
require(tidyverse)
source("CSVConverter.R")
source("Edge Cluster Detection.R")
source("ClusterBarPlots.R")
source("TernaryPlots.R")
source("ClusterCalculator.R")
# Type the paths to your cluster analysis csv, pos file, and indexed range file
# Ensure that "/" in file path are re-written as "//" or "/"
`Cluster Analysis CSV` <- c("006_full - Top-Level ROI - Cluster Analysis (Ni, Cu).csv")
`Original POS File Location` <- c("006_full.pos")
`Indexed Cluster Pos File` <- c("006_full.cluster.indexed.pos")
`Cluster Pos File` <- c("006_full.cluster.pos")
`Indexed Cluster Range File` <- c("Indexed Cluster Range File.rrng")
`Atomic Density of Material` <- 84.59 # Atomic density of BCC Fe is ~ 85.49 atoms/nm3
`Detection Efficiency of LEAP` <- 0.37 # Detection efficiency of reflectron LEAP 3000 ~ 0.37, reflectron LEAP 5000 ~ 0.52
SamplingFraction <- 0.005 #
AlphaNND <- 2
# Imports csv
ClusterCSVImport <- read.csv(paste0(`Cluster Analysis CSV`),
skip = 10)
# Run this function to generate dataframes for further analyses
CSVInputConverter(ClusterCSVImport)
# This function will determine which clusters are on the edge of your dataset
# You need to decide whether to include these in cluster composition calculations
# They will not be included in cluster size calculations
# This function may take a minute or two to run. Lower sampling fractions should increase speed.
findEdgeClustersConvex(`Original POS File Location`,
`Cluster Analysis CSV`,
`Indexed Cluster Pos File`,
`Cluster Pos File`,
SamplingFraction,
AlphaNND)
# View Alpha shape that is generated
plot(AlphaHullShape, indexAlpha = 1)
# Run this function to plot bar chart of cluster compositions - object will be named ClusterBarChart
# Set first object to "Y" if you want Fe concentration plotting - else set to "N"
# Second option allows you to choose how often labels appear on x-axis
ClusterBarChartPlot(FeLinePlot = "Y",
XAxisLabels = 5,
EdgeRemoval = "Y")
# Run this function to plot a ternary plot showing ratio of Ni:Mn:Si for each cluster
# Option for plotting composition of edge clusters: "N" will plot edge clusters, "Y" will remove them from analyses
TernaryPlotFunction(EdgeRemoval = "Y")
# Perform calculations for cluster size (edge clusters not included), volume fraction, number density (edge clusters = 0.5)
# Option 1 are the atomic density of the material you are studying (85.49 atoms/nm3 for BCC Fe)
# Option 2 detection efficiency of intstrument used (0.37 for LEAP 3000, 0.52 for LEAP 5000)
ClusterCalculations(AtomicDensity = `Atomic Density of Material`,
DetectionEfficiency = `Detection Efficiency of LEAP`)
ClusterInformationConvertedCount
ClusterInformationConvertedCount %>%
filter(grepl("Cluster", X))
ClusterInformationConvertedCount %>%
filter(grepl("Cluster", X))%>%
mutate(Edge = if_else(parse_number(as.character(X)) %in% EdgeClusters,"Edge",NA_character_))
ClusterInformationConvertedCount %>%
filter(grepl("Cluster", X))%>%
mutate(Edge = if_else(parse_number(as.character(X)) %in% EdgeClusters,"Edge",NA_character_))
#Dataframe with estimated cluster size (including and excluding Fe)
EdgeClustersIdentity <- ClusterInformationConvertedCount %>%
filter(grepl("Cluster", X))%>%
mutate(Edge = if_else(parse_number(as.character(X)) %in% EdgeClusters,"Edge",NA_character_))
EdgeClustersIdentity %>%
mutate(`Estimated Size (with Fe)` = (TotalAtoms/DetectionEfficiency)/AtomicDensity,
`Estimated Size (No Fe)`= (NonFeAtoms/DetectionEfficiency)/AtomicDensity,
`Estimated Diameter (with Fe)` = 2*((3*`Estimated Size (with Fe)`)/(4*pi))^(1/3),
`Estimated Diameter (No Fe)` = 2*((3*`Estimated Size (No Fe)`)/(4*pi))^(1/3))
DetectionEfficiency = 0.37
EdgeClustersIdentity %>%
mutate(`Estimated Size (with Fe)` = (TotalAtoms/DetectionEfficiency)/AtomicDensity,
`Estimated Size (No Fe)`= (NonFeAtoms/DetectionEfficiency)/AtomicDensity,
`Estimated Diameter (with Fe)` = 2*((3*`Estimated Size (with Fe)`)/(4*pi))^(1/3),
`Estimated Diameter (No Fe)` = 2*((3*`Estimated Size (No Fe)`)/(4*pi))^(1/3))
AtomicDensity = 86
EdgeClustersIdentity %>%
mutate(`Estimated Size (with Fe)` = (TotalAtoms/DetectionEfficiency)/AtomicDensity,
`Estimated Size (No Fe)`= (NonFeAtoms/DetectionEfficiency)/AtomicDensity,
`Estimated Diameter (with Fe)` = 2*((3*`Estimated Size (with Fe)`)/(4*pi))^(1/3),
`Estimated Diameter (No Fe)` = 2*((3*`Estimated Size (No Fe)`)/(4*pi))^(1/3))
EdgeClustersIdentity <- EdgeClustersIdentity %>%
mutate(`Estimated Size (with Fe)` = (TotalAtoms/DetectionEfficiency)/AtomicDensity,
`Estimated Size (No Fe)`= (NonFeAtoms/DetectionEfficiency)/AtomicDensity,
`Estimated Diameter (with Fe)` = 2*((3*`Estimated Size (with Fe)`)/(4*pi))^(1/3),
`Estimated Diameter (No Fe)` = 2*((3*`Estimated Size (No Fe)`)/(4*pi))^(1/3))
TotalNumberAtomsInDataset <- sum(ClusterInformationConvertedCount$TotalAtoms)
VolumeOfTip <- (10^-27)*(TotalNumberAtomsInDataset/DetectionEfficiency)/AtomicDensity
`Volume Fraction (%)` <- 100 *
sum(EdgeClustersIdentity$NonFeAtoms)/
TotalNumberAtomsInDataset
EdgeClustersRemoved <- EdgeClustersIdentity %>% filter(is.na(EdgeClusterIdentities$Edge))
EdgeClustersIdentity
EdgeClustersIdentity %>% filter(is.na(Edge))
EdgeClustersRemoved <- EdgeClustersIdentity %>% filter(is.na(Edge))
NumberDensity <- (nrow(EdgeClustersIdentity) - 0.5 * nrow(EdgeClustersIdentity %>% filter(!is.na(EdgeClusterIdentities$Edge))))/VolumeOfTip
EdgeClustersIdentity %>% filter(is.na(Edge))
nrow(EdgeClustersIdentity)
(nrow(EdgeClustersIdentity) - 0.5 * nrow(EdgeClustersIdentity %>% filter(is.na(Edge))))/VolumeOfTip
NumberDensity <- (nrow(EdgeClustersIdentity) - 0.5 * nrow(EdgeClustersIdentity %>% filter(is.na(Edge))))/VolumeOfTip
NumberDensity <- (nrow(EdgeClustersIdentity) - 0.5 * nrow(EdgeClustersIdentity %>% filter(is.na(Edge))))/VolumeOfTip
`Average Volume No Fe (nm3)` <- mean(EdgeClustersRemoved$`Estimated Size (No Fe)`)
`SE Volume No Fe (nm3)` <- sd(EdgeClustersRemoved$`Estimated Size (No Fe)`)/
sqrt(length(EdgeClustersRemoved$`Estimated Size (No Fe)`))
`Average Diameter No Fe (nm)`<- mean(EdgeClustersRemoved$`Estimated Diameter (No Fe)`)
`SE Diameter No Fe (nm)` <- sd(EdgeClustersRemoved$`Estimated Diameter (No Fe)`)/
sqrt(length(EdgeClustersRemoved$`Estimated Diameter (No Fe)`))
`Average Volume with Fe (nm3)` <- mean(EdgeClustersRemoved$`Estimated Size (with Fe)`)
`SE Volume with Fe (nm3)` <- sd(EdgeClustersRemoved$`Estimated Size (with Fe)`)/
sqrt(length(EdgeClustersRemoved$`Estimated Size (with Fe)`))
`Average Diameter with Fe (nm)`<- mean(EdgeClustersRemoved$`Estimated Diameter (with Fe)`)
`SE Diameter with Fe (nm)` <- sd(EdgeClustersRemoved$`Estimated Diameter (with Fe)`)/
sqrt(length(EdgeClustersRemoved$`Estimated Diameter (with Fe)`))
ClusterCalculationsSummary <<- cbind(NumberDensity,
`Volume Fraction (%)`,
`Average Volume No Fe (nm3)`,
`SE Volume No Fe (nm3)`,
`Average Diameter No Fe (nm)`,
`SE Diameter No Fe (nm)`,
`Average Volume with Fe (nm3)`,
`SE Volume with Fe (nm3)`,
`Average Diameter with Fe (nm)`,
`SE Diameter with Fe (nm)`)
print(ClusterCalculationsSummary)
source('~/GitHub/APT-Data-Analysis/RPV Cluster Analysis/ClusterAnalysis.R')
rm(AlphaHullShape)
findEdgeClustersConvex(`Original POS File Location`,
`Cluster Analysis CSV`,
`Indexed Cluster Pos File`,
`Cluster Pos File`,
SamplingFraction,
AlphaNND)
# View Alpha shape that is generated
plot(AlphaHullShape, indexAlpha = 1)
rm(AlphaHullShape)
rm(periodicTable, ClusterCSVImport, ClusterInfoForBarChart, ClusterInfoAllElements, ClusterInformationConvertedCount)
# Run this if you want to copy cluster calculations summary table to your clipboard (can then paste into excel etc.)
write.table(ClusterCalculationsSummary,
"clipboard",
sep="\t", row.names=FALSE, col.names=TRUE)
c("Test Files//006_full - Top-Level ROI - Cluster Analysis (Ni, Cu).csv")
# Type the paths to your cluster analysis csv, pos file, and indexed range file
# Ensure that "/" in file path are re-written as "//" or "/"
`Cluster Analysis CSV` <- c("Test Files//006_full - Top-Level ROI - Cluster Analysis (Ni, Cu).csv")
# Imports csv
ClusterCSVImport <- read.csv(paste0(`Cluster Analysis CSV`),
skip = 10)
ClusterCSVImport
clusterPosFile
clusterPosFile = c("Test Files//006_full.cluster.pos")
clusterPosFile
?gsub
gsub(".pos",".benejewfianew",c("Test Files//006_full.cluster.pos"))
paste0(gsub(".pos",".benejewfianew",c("Test Files//006_full.cluster.pos")))
# Type the paths to your cluster analysis csv, pos file, and indexed range file
# Ensure that "/" in file path are re-written as "//" or "/"
`Cluster Analysis CSV` <- c("Test Files//006_full - Top-Level ROI - Cluster Analysis (Ni, Cu).csv")
`Original POS File Location` <- c("Test Files//006_full.pos")
`Indexed Cluster Pos File` <- c("Test Files//006_full.cluster.indexed.pos")
`Cluster Pos File` <- c("Test Files//006_full.cluster.pos")
`Atomic Density of Material` <- 84.59 # Atomic density of BCC Fe is ~ 85.49 atoms/nm3
`Detection Efficiency of LEAP` <- 0.37 # Detection efficiency of reflectron LEAP 3000 ~ 0.37, reflectron LEAP 5000 ~ 0.52
SamplingFraction <- 0.005 #
AlphaNND <- 2
# Imports csv
ClusterCSVImport <- read.csv(paste0(`Cluster Analysis CSV`),
skip = 10)
# Run this function to generate dataframes for further analyses
CSVInputConverter(ClusterCSVImport)
# This function will determine which clusters are on the edge of your dataset
# You need to decide whether to include these in cluster composition calculations
# They will not be included in cluster size calculations
# This function may take a minute or two to run. Lower sampling fractions should increase speed.
findEdgeClustersConvex(`Original POS File Location`,
`Cluster Analysis CSV`,
`Indexed Cluster Pos File`,
`Cluster Pos File`,
SamplingFraction,
AlphaNND)
require(tidyverse)
source("CSVConverter.R")
source("Edge Cluster Detection.R")
source("ClusterBarPlots.R")
source("TernaryPlots.R")
source("ClusterCalculator.R")
# Type the paths to your cluster analysis csv, pos file, and indexed range file
# Ensure that "/" in file path are re-written as "//" or "/"
`Cluster Analysis CSV` <- c("Test Files//006_full - Top-Level ROI - Cluster Analysis (Ni, Cu).csv")
`Original POS File Location` <- c("Test Files//006_full.pos")
`Indexed Cluster Pos File` <- c("Test Files//006_full.cluster.indexed.pos")
`Cluster Pos File` <- c("Test Files//006_full.cluster.pos")
`Atomic Density of Material` <- 84.59 # Atomic density of BCC Fe is ~ 85.49 atoms/nm3
`Detection Efficiency of LEAP` <- 0.37 # Detection efficiency of reflectron LEAP 3000 ~ 0.37, reflectron LEAP 5000 ~ 0.52
SamplingFraction <- 0.005 #
AlphaNND <- 2
# Imports csv
ClusterCSVImport <- read.csv(paste0(`Cluster Analysis CSV`),
skip = 10)
# Run this function to generate dataframes for further analyses
CSVInputConverter(ClusterCSVImport)
# This function will determine which clusters are on the edge of your dataset
# You need to decide whether to include these in cluster composition calculations
# They will not be included in cluster size calculations
# This function may take a minute or two to run. Lower sampling fractions should increase speed.
findEdgeClustersConvex(`Original POS File Location`,
`Cluster Analysis CSV`,
`Indexed Cluster Pos File`,
`Cluster Pos File`,
SamplingFraction,
AlphaNND)
clusterPosFile
getwd()
require(tidyverse)
source("CSVConverter.R")
source("Edge Cluster Detection.R")
source("ClusterBarPlots.R")
source("TernaryPlots.R")
source("ClusterCalculator.R")
# Type the paths to your cluster analysis csv, pos file, and indexed range file
# Ensure that "/" in file path are re-written as "//" or "/"
`Cluster Analysis CSV` <- c("Test Files//006_full - Top-Level ROI - Cluster Analysis (Ni, Cu).csv")
`Original POS File Location` <- c("Test Files//006_full.pos")
`Indexed Cluster Pos File` <- c("Test Files//006_full.cluster.indexed.pos")
`Cluster Pos File` <- c("Test Files//006_full.cluster.pos")
`Atomic Density of Material` <- 84.59 # Atomic density of BCC Fe is ~ 85.49 atoms/nm3
`Detection Efficiency of LEAP` <- 0.37 # Detection efficiency of reflectron LEAP 3000 ~ 0.37, reflectron LEAP 5000 ~ 0.52
SamplingFraction <- 0.005 #
AlphaNND <- 2
# Imports csv
ClusterCSVImport <- read.csv(paste0(`Cluster Analysis CSV`),
skip = 10)
# Run this function to generate dataframes for further analyses
CSVInputConverter(ClusterCSVImport)
# This function will determine which clusters are on the edge of your dataset
# You need to decide whether to include these in cluster composition calculations
# They will not be included in cluster size calculations
# This function may take a minute or two to run. Lower sampling fractions should increase speed.
findEdgeClustersConvex(`Original POS File Location`,
`Cluster Analysis CSV`,
`Indexed Cluster Pos File`,
`Cluster Pos File`,
SamplingFraction,
AlphaNND)
ClusterBarChartPlot(FeLinePlot = "Y",
XAxisLabels = 5,
EdgeRemoval = "Y")
# Run this function to plot a ternary plot showing ratio of Ni:Mn:Si for each cluster
# Option for plotting composition of edge clusters: "N" will plot edge clusters, "Y" will remove them from analyses
TernaryPlotFunction(EdgeRemoval = "Y")
# Perform calculations for cluster size (edge clusters not included), volume fraction, number density (edge clusters = 0.5)
# Option 1 are the atomic density of the material you are studying (85.49 atoms/nm3 for BCC Fe)
# Option 2 detection efficiency of intstrument used (0.37 for LEAP 3000, 0.52 for LEAP 5000)
ClusterCalculations(AtomicDensity = `Atomic Density of Material`,
DetectionEfficiency = `Detection Efficiency of LEAP`)
getwd()
