{
    "collab_server" : "",
    "contents" : "# Generate an XML script for posgen that will create a \n# number of core-shell particles, and then cropped by a cuboid\n\nedgeParticleSim_sphere <- function(fileName, posFileName, ionDensity, boxSize, numParticles, particleValue, particleComp,\n                                   matrixComp = data.frame(mass=c(1,2,3),count=c(1,1,98)),\n                                   clusterstatsFileName = \"cluster-stats.txt\", \n                                   unclusterstatsFileName = \"uncluster-stats.txt\",\n                                   sizedistFileName = \"sizeDist.txt\", \n                                   clusteredposFileName = \"cluster.pos\", \n                                   unclusteredposFileName = \"matrix.pos\", \n                                   clusteridposFileName = \"cluster.indexed.pos\",\n                                   dmaxSettings = list(dclassify = \"0.0\",\n                                                       knn = \"1\",\n                                                       dmax = \"0.5\", \n                                                       dbulk = \"0.2\",\n                                                       derode = \"0.2\")){\n  # ** Range file and core ions are hard coded at the moment **\n  # example inputs\n  # fileName <- \"sim-edge-particles2.xml\"\n  # posFileName <- \"test2.pos\"\n  # ionDensity <- 20\n  # boxSize <- 20 (centered on the origin)\n  # numParticles <- 20 number of particles to generate\n  # particleValue the value passed to the size generator in placeParticles\n  # particleComp <- t(matrix(c(1, 0.5, 2, 0.5), nrow = 2))\n  #   50% mass value of 1 and 50% mass value of 2\n  \n  particles <- particlePlace(boxSize=boxSize, numParticles = numParticles, particleValue = particleValue)\n  \n  fileParts <- vector(length = nrow(particles)+2, mode= \"list\")\n  \n  fileParts[[1]] <- \n    c('<!DOCTYPE posscript SYSTEM \"posscript.dtd\">',\n      '<posscript>',\n      '\t<version value=\"0.0.1\"/>',\n      '',\n      '\t<!-- store the matrix data -->',\n      ' <spatrand>',\n      sprintf(' \\t<bound x=\"%f\" y=\"%f\" z=\"%f\"/>',boxSize,boxSize,boxSize),\n      sprintf(' \\t<density value=\"%2.3f\"/>', ionDensity),\n      '',\n      sprintf('\t\t<atom index=\"(000)\" mass=\"%f\"/>\\n\t\t<count value=\"%f\"/>\\n', matrixComp$mass, matrixComp$count),\n      '',\n      ' </spatrand>',\n      '',\n      sprintf(' <geotransform> <translate><x value=\"%2.5f\"/><y value=\"%2.5f\"/><z value=\"%2.5f\"/></translate></geotransform>',\n              -boxSize/2,\n              -boxSize/2,\n              -boxSize/2),\n      '')\n  \n  # clip out the matrix from the particle regions\n  for (i in 1:nrow(particles)) {\n    temp <- sprintf('\t<clip invert=\"true\">  <sphere radius=\"%2.5f\"> <x value=\"%2.5f\"/> <y value=\"%2.5f\"/> <z value=\"%2.5f\"/> </sphere>  </clip>',\n                    particles$r[i],\n                    particles$x[i],\n                    particles$y[i],\n                    particles$z[i])\n    fileParts[[1]] <- c(fileParts[[1]], temp)\n  }\n  # add the store command at the end, to store the matrix data\n  fileParts[[1]] <- c(fileParts[[1]], c('\t<store name=\"running_dataset\" forceram=\"true\" clear=\"true\"/>',\n                                        '',\n                                        ''))\n  \n  # place particles here\n  for (i in 1:nrow(particles)) {\n    fileParts[[i+1]] <- c(\n      sprintf('\\t<!-- START PPT  %d -->',i),\n      particleGenSphere(cx=particles$x[i],cy = particles$y[i], cz = particles$z[i], r = particles$r[i], density = ionDensity, composition = particleComp),\n      '\\t        <recall name=\"running_dataset\"/>',\n      '\\t        <store name=\"running_dataset\" clear=\"true\" forceram=\"true\"/>',\n      sprintf('\\t<!-- END PPT  %d -->',i),\n      '')\n  }\n  \n  fileParts[[length(fileParts)]] <- c('\t<!-- restore the running dataset -->',\n                                      '\t<recall name=\"running_dataset\"/>',\n                                      '',\n                                      '\\t<!-- clip to the bounding box -->',\n                                      '\\t<clip>',\n                                      '\\t\\t<box>',\n                                      sprintf('\\t\\t\\t<%s value=\"%f\"/>', c(\"x\",\"y\",\"z\"), rep(-boxSize/2,3)),\n                                      sprintf('\\t\\t\\t<%s value=\"%f\"/>', c(\"x\",\"y\",\"z\"), rep(boxSize/2,3)),\n                                      '\\t\\t</box>',\n                                      '\\t</clip>',\n                                      '',\n                                      sprintf('\\t<possave file=\"%s\"/>', posFileName),\n                                      '',\n                                      '<!-- CLUSTER ANALYSIS -->',\n                                      '\t<cluster>',\n                                      '\t\t<algorithm value=\"maxsep\">',\n                                      sprintf('\t\t\t<dclassify value=\"%s\" knn=\"%s\"/> <!-- Coring (pre-cluster) dist; zero to disable this step-->', dmaxSettings$dclassify, dmaxSettings$knn),\n                                      sprintf('\t\t\t<dmax value=\"%s\"/> <!-- Max sep dist -->', dmaxSettings$dmax),\n                                      sprintf('\t\t\t<dbulk value=\"%s\"/> <!-- AKA envelope-->', dmaxSettings$dbulk),\n                                      sprintf('\t\t\t<derode value=\"%s\"/> <!-- erosion distance-->', dmaxSettings$derode),\n                                      '\t\t</algorithm>',\n                                      '\t\t<range file=\"simple.RRNG\"/>',\n                                      '\t\t<!--select ions for cluster core (aka solute)-->',\n                                      '\t\t<core>',\n                                      '\t\t\t<typelist>',\n                                      '\t\t\t\t<atomtype symbol=\"H\"/>',\n                                      '\t\t\t\t<atomtype symbol=\"C\"/>',\n                                      '\t\t\t</typelist>',\n                                      '\t\t</core>',\n                                      '\t\t<!--select ions for bulk (aka matrix)-->',\n                                      '\t\t<bulk>',\n                                      '\t\t\t<typelist>',\n                                      '\t\t\t\t<atomtype symbol=\"Fe\"/> ',\n                                      '\t\t\t</typelist>',\n                                      '\t\t</bulk>',\n                                      '',\n                                      '\t\t<sizeclip nmin=\"50\"/> ',\n                                      '\t\t<unranged foroutput=\"true\" forstats=\"true\"/>',\n                                      '',\n                                      sprintf('\t\t<clusterstats core=\"true\" bulk=\"true\" percluster=\"true\" file=\"%s\"/>', clusterstatsFileName),\n                                      sprintf('\t\t<unclusterstats file=\"%s\"/>',unclusterstatsFileName),\n                                      '',\n                                      sprintf('\t\t<sizedist file=\"%s\"/>', sizedistFileName),\n                                      sprintf('\t\t<clustered-pos file=\"%s\" retain=\"true\"/>', clusteredposFileName),\n                                      sprintf('\t\t<unclustered-pos file=\"%s\" retain=\"true\"/>', unclusteredposFileName),\n                                      '',\n                                      sprintf('\t\t<clusterid file=\"%s\" offset=\"1\"/>', clusteridposFileName),\n                                      '\t\t',\n                                      '\t</cluster>',\n                                      '</posscript>')\n  \n  \n  # write XML file\n  writeLines(unlist(fileParts),fileName)\n  \n  # return the generated particle positions and sizes\n  return(particles)\n}\n\n\nedgeParticleSim_coreShell <- function(fileName, posFileName, ionDensity, boxSize, numParticles, rCore, rShell, compShell, compCore,\n                                   matrixComp = data.frame(mass=c(1,2,3),count=c(1,1,98)),\n                                   clusterstatsFileName = \"cluster-stats.txt\", \n                                   unclusterstatsFileName = \"uncluster-stats.txt\",\n                                   sizedistFileName = \"sizeDist.txt\", \n                                   clusteredposFileName = \"cluster.pos\", \n                                   unclusteredposFileName = \"matrix.pos\", \n                                   clusteridposFileName = \"cluster.indexed.pos\",\n                                   dmaxSettings = list(dclassify = \"0.0\",\n                                                       knn = \"1\",\n                                                       dmax = \"0.5\", \n                                                       dbulk = \"0.2\",\n                                                       derode = \"0.2\")){\n  # ** Range file and core ions are hard coded at the moment **\n  # example inputs\n  # fileName <- \"sim-edge-particles2.xml\"\n  # posFileName <- \"test2.pos\"\n  # ionDensity <- 20\n  # boxSize <- 20 (centered on the origin)\n  # numParticles <- 20 number of particles to generate\n  # particleValue the value passed to the size generator in placeParticles\n  # particleComp <- t(matrix(c(1, 0.5, 2, 0.5), nrow = 2))\n  #   50% mass value of 1 and 50% mass value of 2\n  \n  particles <- particlePlace(boxSize=boxSize, numParticles = numParticles, particleValue = rShell)\n  \n  fileParts <- vector(length = nrow(particles)+2, mode= \"list\")\n  \n  fileParts[[1]] <- \n    c('<!DOCTYPE posscript SYSTEM \"posscript.dtd\">',\n      '<posscript>',\n      '\t<version value=\"0.0.1\"/>',\n      '',\n      '\t<!-- store the matrix data -->',\n      ' <spatrand>',\n      sprintf(' \\t<bound x=\"%f\" y=\"%f\" z=\"%f\"/>',boxSize,boxSize,boxSize),\n      sprintf(' \\t<density value=\"%2.3f\"/>', ionDensity),\n      '',\n      sprintf('\t\t<atom index=\"(000)\" mass=\"%f\"/>\\n\t\t<count value=\"%f\"/>\\n', matrixComp$mass, matrixComp$count),\n      '',\n      ' </spatrand>',\n      '',\n      sprintf(' <geotransform> <translate><x value=\"%2.5f\"/><y value=\"%2.5f\"/><z value=\"%2.5f\"/></translate></geotransform>',\n              -boxSize/2,\n              -boxSize/2,\n              -boxSize/2),\n      '')\n  \n  # clip out the matrix from the particle regions\n  for (i in 1:nrow(particles)) {\n    temp <- sprintf('\t<clip invert=\"true\">  <sphere radius=\"%2.5f\"> <x value=\"%2.5f\"/> <y value=\"%2.5f\"/> <z value=\"%2.5f\"/> </sphere>  </clip>',\n                    particles$r[i],\n                    particles$x[i],\n                    particles$y[i],\n                    particles$z[i])\n    fileParts[[1]] <- c(fileParts[[1]], temp)\n  }\n  # add the store command at the end, to store the matrix data\n  fileParts[[1]] <- c(fileParts[[1]], c('\t<store name=\"running_dataset\" forceram=\"true\" clear=\"true\"/>',\n                                        '',\n                                        ''))\n  \n  # place particles here\n  for (i in 1:nrow(particles)) {\n    fileParts[[i+1]] <- c(\n      sprintf('\\t<!-- START PPT  %d -->',i),\n      particleGenCoreShell(cx=particles$x[i],\n                           cy = particles$y[i], \n                           cz = particles$z[i], \n                           rCore = rCore,\n                           rShell = particles$r[i], \n                           density = ionDensity, \n                           compositionCore = compCore,\n                           compositionShell = compShell),\n      '\\t        <recall name=\"running_dataset\"/>',\n      '\\t        <store name=\"running_dataset\" clear=\"true\" forceram=\"true\"/>',\n      sprintf('\\t<!-- END PPT  %d -->',i),\n      '')\n  }\n  \n  fileParts[[length(fileParts)]] <- c('\t<!-- restore the running dataset -->',\n                                      '\t<recall name=\"running_dataset\"/>',\n                                      '',\n                                      '\\t<!-- clip to the bounding box -->',\n                                      '\\t<clip>',\n                                      '\\t\\t<box>',\n                                      sprintf('\\t\\t\\t<%s value=\"%f\"/>', c(\"x\",\"y\",\"z\"), rep(-boxSize/2,3)),\n                                      sprintf('\\t\\t\\t<%s value=\"%f\"/>', c(\"x\",\"y\",\"z\"), rep(boxSize/2,3)),\n                                      '\\t\\t</box>',\n                                      '\\t</clip>',\n                                      '',\n                                      sprintf('\\t<possave file=\"%s\"/>', posFileName),\n                                      '',\n                                      '<!-- CLUSTER ANALYSIS -->',\n                                      '\t<cluster>',\n                                      '\t\t<algorithm value=\"maxsep\">',\n                                      sprintf('\t\t\t<dclassify value=\"%s\" knn=\"%s\"/> <!-- Coring (pre-cluster) dist; zero to disable this step-->', dmaxSettings$dclassify, dmaxSettings$knn),\n                                      sprintf('\t\t\t<dmax value=\"%s\"/> <!-- Max sep dist -->', dmaxSettings$dmax),\n                                      sprintf('\t\t\t<dbulk value=\"%s\"/> <!-- AKA envelope-->', dmaxSettings$dbulk),\n                                      sprintf('\t\t\t<derode value=\"%s\"/> <!-- erosion distance-->', dmaxSettings$derode),\n                                      '\t\t</algorithm>',\n                                      '\t\t<range file=\"simple.RRNG\"/>',\n                                      '\t\t<!--select ions for cluster core (aka solute)-->',\n                                      '\t\t<core>',\n                                      '\t\t\t<typelist>',\n                                      '\t\t\t\t<atomtype symbol=\"H\"/>',\n                                      '\t\t\t\t<atomtype symbol=\"C\"/>',\n                                      '\t\t\t</typelist>',\n                                      '\t\t</core>',\n                                      '\t\t<!--select ions for bulk (aka matrix)-->',\n                                      '\t\t<bulk>',\n                                      '\t\t\t<typelist>',\n                                      '\t\t\t\t<atomtype symbol=\"Fe\"/> ',\n                                      '\t\t\t</typelist>',\n                                      '\t\t</bulk>',\n                                      '',\n                                      '\t\t<sizeclip nmin=\"50\"/> ',\n                                      '\t\t<unranged foroutput=\"true\" forstats=\"true\"/>',\n                                      '',\n                                      sprintf('\t\t<clusterstats core=\"true\" bulk=\"true\" percluster=\"true\" file=\"%s\"/>', clusterstatsFileName),\n                                      sprintf('\t\t<unclusterstats file=\"%s\"/>',unclusterstatsFileName),\n                                      '',\n                                      sprintf('\t\t<sizedist file=\"%s\"/>', sizedistFileName),\n                                      sprintf('\t\t<clustered-pos file=\"%s\" retain=\"true\"/>', clusteredposFileName),\n                                      sprintf('\t\t<unclustered-pos file=\"%s\" retain=\"true\"/>', unclusteredposFileName),\n                                      '',\n                                      sprintf('\t\t<clusterid file=\"%s\" offset=\"1\"/>', clusteridposFileName),\n                                      '\t\t',\n                                      '\t</cluster>',\n                                      '</posscript>')\n  \n  \n  # write XML file\n  writeLines(unlist(fileParts),fileName)\n  \n  # return the generated particle positions and sizes\n  return(particles)\n}\n\n## function to place a sphere of specific size\nparticleGenSphere <- function(cx, cy, cz, r, density, composition){\n  # cx, cy, cz are centre coordinates\n  # r = radius\n  # density = ions/volume\n  # composition is the mass and count value as a matrix, e.g.\n  # t(matrix(c(1, 0.5, 2, 0.5), nrow = 2)) would be half mass 1\n  # and half mass 2, posgen normalises the count values\n  \n  # make the atom indicies\n  compList <- sprintf('\t\t<atom index=\"(000)\" mass=\"%f\"/>\\n\t\t<count value=\"%f\"/>',composition[,1], composition[,2])\n\n  # combine the spatrand, translate, clip and translate together\n  return(c('\t<spatrand>',              # generate random box\n           sprintf('    <bound x=\"%f\" y=\"%f\" z=\"%f\"/>',r*2,r*2,r*2),\n           sprintf('\t\t<density value=\"%2.3f\"/>', density),\n           '',\n           compList,\n           '\t</spatrand> ',\n           '\t<geotransform>',\n           '\t\t<translate>',           # centre it on the origin\n           sprintf('\t\t\t<x value=\"%f\"/>',-r),\n           sprintf('\t\t\t<y value=\"%f\"/>',-r),\n           sprintf('\t\t\t<z value=\"%f\"/>',-r),\n           '\t\t</translate>',\n           '\t</geotransform>',\n           '\t<clip>',                  # clip out a sphere\n           sprintf('\t\t<sphere radius=\"%f\">',r),\n           '\t\t\t<x value=\"0\"/>',\n           '\t\t\t<y value=\"0\"/>',\n           '\t\t\t<z value=\"0\"/>',\n           '\t\t</sphere>',\n           '\t</clip>',\n           '\t<geotransform>',\n           '\t\t<translate>',           # translate it to the required point\n           sprintf('\t\t\t<x value=\"%f\"/>',cx),\n           sprintf('\t\t\t<y value=\"%f\"/>',cy),\n           sprintf('\t\t\t<z value=\"%f\"/>',cz),\n           '\t\t</translate>',\n           '\t</geotransform>'))\n}\n\n## function to place a core-shell sphere of specific size (shell and core same density)\nparticleGenCoreShell <- function(cx, cy, cz, rCore, rShell, density, compositionCore, compositionShell) {\n  # cx, cy, cz are centre coordinates\n  # rCore = radius of the core\n  # rShell = outer radius of the shell\n  #   therefore, shell thickness = rShell-rCore\n  # density = ions/volume\n  # composition is the mass and count value as a matrix, e.g.\n  #   t(matrix(c(1, 0.5, 2, 0.5), nrow = 2)) would be half mass 1\n  #   and half mass 2, posgen normalises the count values\n  #   The composition of the core and shell are specified separately\n  \n  # make the atom indicies of the core\n  compListCore <- sprintf('\t\t<atom index=\"(000)\" mass=\"%f\"/>\\n\t\t<count value=\"%f\"/>',\n                          compositionCore[,1], compositionCore[,2])\n  \n  # make the atom indicies of the shell\n  compListShell <- sprintf('\t\t<atom index=\"(000)\" mass=\"%f\"/>\\n\t\t<count value=\"%f\"/>',\n                           compositionShell[,1], compositionShell[,2])\n  \n  # combine the spatrand, translate, clip and translate together\n  return(c('\t<spatrand>',              # generate random box\n           sprintf('    <bound x=\"%f\" y=\"%f\" z=\"%f\"/>',rCore*2,rCore*2,rCore*2),\n           sprintf('\t\t<density value=\"%2.3f\"/>', density),\n           '',\n           compListCore,\n           '\t</spatrand> ',\n           '\t<geotransform>',\n           '\t\t<translate>',           # centre it on the origin\n           sprintf('\t\t\t<x value=\"%f\"/>',-rCore),\n           sprintf('\t\t\t<y value=\"%f\"/>',-rCore),\n           sprintf('\t\t\t<z value=\"%f\"/>',-rCore),\n           '\t\t</translate>',\n           '\t</geotransform>',\n           '\t<clip>',                  # clip out a sphere\n           sprintf('\t\t<sphere radius=\"%f\">',rCore),\n           '\t\t\t<x value=\"0\"/>',\n           '\t\t\t<y value=\"0\"/>',\n           '\t\t\t<z value=\"0\"/>',\n           '\t\t</sphere>',\n           '\t</clip>',\n           '<store name=\"core\" clear=\"true\" forceram=\"true\"/>',\n           '',\n           '<!-- Generate shell atoms -->',\n           '\t<spatrand>',              # generate random box\n           sprintf('    <bound x=\"%f\" y=\"%f\" z=\"%f\"/>',rShell*2,rShell*2,rShell*2),\n           sprintf('\t\t<density value=\"%2.3f\"/>', density),\n           '',\n           compListShell,\n           '\t</spatrand> ',\n           '\t<geotransform>',\n           '\t\t<translate>',           # centre it on the origin\n           sprintf('\t\t\t<x value=\"%f\"/>',-rShell),\n           sprintf('\t\t\t<y value=\"%f\"/>',-rShell),\n           sprintf('\t\t\t<z value=\"%f\"/>',-rShell),\n           '\t\t</translate>',\n           '\t</geotransform>',\n           '\t<clip invert=\"true\">',   # clip out core\n           sprintf('\t\t<sphere radius=\"%f\">',rCore),\n           '\t\t\t<x value=\"0\"/>',\n           '\t\t\t<y value=\"0\"/>',\n           '\t\t\t<z value=\"0\"/>',\n           '\t\t</sphere>',\n           '\t</clip>',\n           '\t<clip>',                  # clip outer\n           sprintf('\t\t<sphere radius=\"%f\">',rShell),\n           '\t\t\t<x value=\"0\"/>',\n           '\t\t\t<y value=\"0\"/>',\n           '\t\t\t<z value=\"0\"/>',\n           '\t\t</sphere>',\n           '\t</clip>',\n           '',\n           '<!-- merge it with its core -->',\n           '<recall name=\"core\"/>',\n           '',\n           '<!-- Translate particle -->',\n           '\t<geotransform>',\n           '\t\t<translate>',           # translate it to the required point\n           sprintf('\t\t\t<x value=\"%f\"/>',cx),\n           sprintf('\t\t\t<y value=\"%f\"/>',cy),\n           sprintf('\t\t\t<z value=\"%f\"/>',cz),\n           '\t\t</translate>',\n           '\t</geotransform>'))\n  \n}",
    "created" : 1544790657589.000,
    "dirty" : false,
    "encoding" : "ISO8859-1",
    "folds" : "",
    "hash" : "3323206962",
    "id" : "55DE0C0E",
    "lastKnownWriteTime" : 1544777964,
    "last_content_update" : 1544777964,
    "path" : "D:/DPhilY1/Papers/AlphaHullMethodology/edge-particle-sim/edgeParticleSimulator_xmlGen_all.R",
    "project_path" : null,
    "properties" : {
    },
    "relative_order" : 4,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}