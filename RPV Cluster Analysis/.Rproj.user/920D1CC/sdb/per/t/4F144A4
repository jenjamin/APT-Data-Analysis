{
    "collab_server" : "",
    "contents" : "# Edge particle simulation\nStartTime <- Sys.time()\n# Generate a set of non-colliding particles (possibly with a core-shell structure)\n#setwd(dir = \"C:\\\\Workbackup\\\\APT\\\\edge-particle-sim\\\\posgen2\")\nsetwd(dir = \"D:\\\\DPhilY1\\\\Papers\\\\AlphaHullMethodology\\\\edge-particle-sim\\\\posgen2\")\n\nsource('../particlePlace.R')\nsource('../edgeParticleSimulator_xmlGen_all.R')\nsource('../findEdgeClusters.R')\nsource('../read.pos.sampled.R')\n\nAtomicDensity <- 20\nboxSize <- 20\nruns <- 50\n\n# Generate pos file using posgen xml script\n#   Read template, write particles\n\nsummaryList <- vector(\"list\", length = runs)\n\nfor (fileId in 1:runs) {\n  \n  compCore <- t(matrix(c(1, 1000, 2, 1), nrow = 2))\n  compShell <- t(matrix(c(1, 1, 2, 1000), nrow = 2))\n  \n  particles <- edgeParticleSim_coreShell(fileName = sprintf(\"%03d_gen.xml\",fileId),\n                                      posFileName = sprintf(\"%03d_full.pos\",fileId),\n                                      ionDensity = AtomicDensity, \n                                      numParticles = 20,\n                                      boxSize = boxSize, \n                                      rCore = 2/(2^(1/3)),\n                                      rShell = 2, \n                                      compCore = compCore,\n                                      compShell = compShell,\n                                      matrixComp = data.frame(mass=c(1,2,3),count=c(.1,.1,99.8)),\n                                      clusterstatsFileName   = sprintf(\"%03d_stats.txt\",fileId), \n                                      unclusterstatsFileName = sprintf(\"%03d_stats_matrix.txt\",fileId), \n                                      sizedistFileName       = sprintf(\"%03d_sizeDist.txt\",fileId), \n                                      clusteredposFileName   = sprintf(\"%03d_cluster.pos\",fileId), \n                                      unclusteredposFileName = sprintf(\"%03d_matrix.pos\",fileId), \n                                      clusteridposFileName   = sprintf(\"%03d_cluster.index.pos\",fileId))\n  #   Run posgen\n  # Perform cluster selection as part of posgen\n  # This generates the files listed in the input XML file\n  system(sprintf(\"posgen.exe %03d_gen.xml\",fileId), wait = TRUE, intern=TRUE)\n  \n  # Find edge clusters\n  edgeClustersAlpha <- findEdgeClusters(posFileName = sprintf(\"%03d_full.pos\",fileId), \n                                        clusterStatsFile = sprintf(\"%03d_stats.txt\",fileId),\n                                        AtomicDensity = AtomicDensity, \n                                        DetectionEfficiency = 1, \n                                        SamplingFraction = 0.005)\n  \n  \n  # Analyse results\n  # Make data frame of: testNo, clusterNo, simSize, detected?, alphaEdge?, actualEdge, composition, measuredRg, soluteCount, matrixCount,\n  # Need to analyse composion\n  # Which clusters were identified, and which ones were edge clusters (make truth table)\n  \n  # match generated to detected clusters (by nearest centre distance)\n  df1 <- select(particles,\"x\",\"y\",\"z\")\n  df2 <- select(edgeClustersAlpha$ClusterImportedData, x=xpos, y=ypos, z=zpos)\n  distances <- as.matrix(dist(bind_rows(df1, df2)))\n  \n  row.start <- nrow(df1)+1\n  row.end <- nrow(df1) + nrow(df2)\n  col.start <- 1\n  col.end <- nrow(df1)\n  # This \\/ returns a list as long as the detected clusters, with which number it matches in the original list\n  distanceIndex<-apply(distances[row.start:row.end, col.start:col.end], 1, which.min)\n  # This is the distance between those points (should be within original cluster radius)\n  #d<-apply(distances[row.start:row.end, col.start:col.end], 1, min)\n  \n  # Construct data frame of results\n  summaryResults <- particles\n  colnames(summaryResults) <- paste(\"sim\", colnames(summaryResults), sep = \"_\")\n  \n  temp <- bind_cols(summaryResults[distanceIndex,], edgeClustersAlpha$ClusterImportedData)\n  summaryResults <- bind_rows(temp, summaryResults[-distanceIndex,])\n  \n  # Define if they were edge or not based on the simulated positions\n  # If any of (x,y,z) +/- size exceeds the upper or lower bounding box limit then they are edge clusters\n  summaryResults$sim_edge <-  (summaryResults$sim_x-summaryResults$sim_r< -boxSize/2 | \n                                 summaryResults$sim_x+summaryResults$sim_r>boxSize/2 | \n                                 summaryResults$sim_y-summaryResults$sim_r< -boxSize/2 | \n                                 summaryResults$sim_y+summaryResults$sim_r>boxSize/2 | \n                                 summaryResults$sim_z-summaryResults$sim_r< -boxSize/2 | \n                                 summaryResults$sim_z+summaryResults$sim_r>boxSize/2)\n  summaryResults$detected <- !is.na(summaryResults$Y)\n  summaryResults$edge <- FALSE\n  summaryResults$edge[edgeClustersAlpha$TotalEdgeClusters] <- TRUE\n  \n  summaryResults$ID <- fileId\n  summaryList[[fileId]] <- summaryResults\n  \n  # clean up\n  # copy generated file to separate folder \"results/\"\n  file.copy(from = c(\n    sprintf(\"%03d_stats.txt\",fileId), \n    sprintf(\"%03d_sizeDist.txt\",fileId), \n    sprintf(\"%03d_gen.xml\",fileId)\n  ),\n  to = \"results\"  )\n  \n  # delete files to free up space\n  if (FALSE) {\n    file.remove(\n      sprintf(\"%03d_full.pos\",fileId),\n      sprintf(\"%03d_stats_matrix.txt\",fileId), \n      sprintf(\"%03d_cluster.pos\",fileId), \n      sprintf(\"%03d_matrix.pos\",fileId), \n      sprintf(\"%03d_cluster.index.pos\",fileId),\n      sprintf(\"%03d_stats.txt\",fileId), \n      sprintf(\"%03d_sizeDist.txt\",fileId), \n      sprintf(\"%03d_gen.xml\",fileId))\n  }\n  \n}\n\nEndTime <- Sys.time()\nTotalTime <- EndTime - StartTime\nprint(TotalTime)",
    "created" : 1544786869910.000,
    "dirty" : false,
    "encoding" : "ISO8859-1",
    "folds" : "",
    "hash" : "1855557104",
    "id" : "4F144A4",
    "lastKnownWriteTime" : 1544789611,
    "last_content_update" : 1544789611349,
    "path" : "D:/DPhilY1/Papers/AlphaHullMethodology/edge-particle-sim/edgeParticleSimulator_coreShell_id003.R",
    "project_path" : null,
    "properties" : {
    },
    "relative_order" : 2,
    "source_on_save" : true,
    "source_window" : "",
    "type" : "r_source"
}