select(contains("Element")) %>%
unite("Ion") %>%
mutate(Ion = paste(gsub("1|Name|:|NA|_| ","",Ion)))
)
rm(Ranges, RangesDF)
#### Range pos####
Ion <- data.frame(matrix(NA,
nrow = nrow(SimulatedPos)))
for(i in seq(1,nrow(RangesDF2),1)){
Name <- RangesDF2$Ion[i]
Ion <<- cbind(
Ion,
SimulatedPos %>%
mutate(Name = ifelse(SimulatedPos$m > RangesDF2$Start[i] &
SimulatedPos$m < RangesDF2$End[i],
RangesDF2$Ion[i], NA)) %>%
select(Name))
}
Ion$Noise <- "Noise"
SimulatedPos$Ion <- apply(Ion, 1, function(x) na.omit(x)[1])
rm(i, Ion)
#### Plot one D conc plot ####
ROILength = max(SimulatedPos$z) - min(SimulatedPos$z)
OneDConcPlot <- SimulatedPos %>%
group_by(Distance = cut(z, breaks= seq(min(SimulatedPos$z), max(SimulatedPos$z), by = 0.1)),
Ion) %>%
summarise(Ioncount = n()) %>%
ungroup() %>%
spread(Ion, Ioncount) %>%
mutate(Distance = as.numeric(as.character((ceiling(ROILength))*(row_number()/n()))))
OneDConcPlot[is.na(OneDConcPlot)] <- 0
ggplot(OneDConcPlot) +
geom_point(aes(Distance, P))
View(GBtest)
ggplot(OneDConcPlot) +
geom_point(aes(Distance, Fe))
ggplot(OneDConcPlot) +
geom_point(aes(Distance, Ni))
seq(-1,1,0.1)
Distance = seq(-1,1,0.1)
90.0-abs(Distance)
90.0+abs(Distance)
data.frame(Distance = seq(-1,1,0.1))
data.frame(Distance = seq(-1,1,0.1)) %>%
mutate(Fe = 90.0-abs(Distance))
data.frame(Distance = seq(-1,1,0.1)) %>%
mutate(Fe = 90.0-abs(Distance),
Ni = 6+abs(Distance),
P = 4 +abs(Distance))
data.frame(Distance = seq(-1,1,0.1)) %>%
mutate(Fe = 90.0-abs(Distance),
Ni = 6+abs(Distance),
P = 4 +abs(Distance),
Sum = Fe + Ni + P)
data.frame(Distance = seq(-1,1,0.1)) %>%
mutate(Fe = 90.0 - abs(Distance),
Ni = 6 + 0.5*abs(Distance),
P = 4 + 0.5*abs(Distance),
Sum = Fe + Ni + P)
GBtest <- data.frame()
for (Distance in seq(-1,0.9,0.1)) {
GBSection <- POSGenerator(AtomicDensity = 40,
XRange = c(-10, 10),
YRange = c(-10, 10),
ZRange = c(-Distance, -Distance+0.1),
CompositionTable = data.frame("Element" = c("Fe", "Ni", "P"),
"Abundance"= c(90.0-abs(Distance),
6.0+0.5*abs(Distance),
4.0+0.5*abs(Distance)),
"Mass" = c(28, 29, 15.5)))
GBtest <- rbind(GBtest, GBSection)
}
#### Create overall pos ####
SimulatedPos <- rbind(MatrixA, MatrixB, GBtest)
rm(MatrixA, MatrixB, GB)
#### Input RangeFile and Tidy ####
RangeFile <- read.delim("Range For Simulation.rrng", colClasses = "character", header = FALSE)
RowsToSkip <- as.numeric(gsub("Number=", "", RangeFile[2,])) + 5
Ranges <- RangeFile %>% slice(RowsToSkip:n())
rm(RowsToSkip, RangeFile)
RangesDF <- data.frame()
i = 0
for(i in unique(str_count(Ranges$V1, ":") - 2)){
Elements <- c()
for(j in seq(1,i,1)){
Elements <- append(Elements,paste("Element",j))
}
ColumnNames <- c("Start", "End", "Volume",
Elements, "Color")
Ranges %>%
mutate(NumberIons = str_count(V1, ":") - 2) %>%
filter(NumberIons == i) %>%
separate(V1,
ColumnNames,
sep = " ")
RangesDF <- bind_rows(RangesDF,
Ranges %>%
mutate(NumberIons = str_count(V1, ":") - 2) %>%
filter(NumberIons == i) %>%
separate(V1,
ColumnNames,
sep = " ")
)
}
rm(ColumnNames, Elements,i, j)
#### Creat R-friendly range file ####
RangesDF2 <- cbind(
RangesDF %>%
mutate(Start = as.numeric(str_extract(Start,"[^=]+$")),
End = as.numeric(str_extract(End, "[^=]+$")),
Volume = gsub("Vol:", "", Volume),
Color = gsub("Color:", "", Color)) %>%
select(Start, End, Volume, Color),
RangesDF %>%
select(contains("Element")) %>%
unite("Ion") %>%
mutate(Ion = paste(gsub("1|Name|:|NA|_| ","",Ion)))
)
rm(Ranges, RangesDF)
#### Range pos####
Ion <- data.frame(matrix(NA,
nrow = nrow(SimulatedPos)))
for(i in seq(1,nrow(RangesDF2),1)){
Name <- RangesDF2$Ion[i]
Ion <<- cbind(
Ion,
SimulatedPos %>%
mutate(Name = ifelse(SimulatedPos$m > RangesDF2$Start[i] &
SimulatedPos$m < RangesDF2$End[i],
RangesDF2$Ion[i], NA)) %>%
select(Name))
}
Ion$Noise <- "Noise"
SimulatedPos$Ion <- apply(Ion, 1, function(x) na.omit(x)[1])
rm(i, Ion)
#### Plot one D conc plot ####
ROILength = max(SimulatedPos$z) - min(SimulatedPos$z)
OneDConcPlot <- SimulatedPos %>%
group_by(Distance = cut(z, breaks= seq(min(SimulatedPos$z), max(SimulatedPos$z), by = 0.1)),
Ion) %>%
summarise(Ioncount = n()) %>%
ungroup() %>%
spread(Ion, Ioncount) %>%
mutate(Distance = as.numeric(as.character((ceiling(ROILength))*(row_number()/n()))))
OneDConcPlot[is.na(OneDConcPlot)] <- 0
ggplot(OneDConcPlot) +
geom_point(aes(Distance, P))
ggplot(OneDConcPlot) +
geom_point(aes(Distance, Fe))
GBtest <- data.frame()
for (Distance in seq(-1,1,0.1)) {
GBSection <- POSGenerator(AtomicDensity = 40,
XRange = c(-10, 10),
YRange = c(-10, 10),
ZRange = c(-Distance, -Distance+0.1),
CompositionTable = data.frame("Element" = c("Fe", "Ni", "P"),
"Abundance"= c(90.0-abs(Distance),
6.0+0.5*abs(Distance),
4.0+0.5*abs(Distance)),
"Mass" = c(28, 29, 15.5)))
GBtest <- rbind(GBtest, GBSection)
}
#### Create overall pos ####
SimulatedPos <- rbind(MatrixA, MatrixB, GBtest)
rm(MatrixA, MatrixB, GB)
#### Input RangeFile and Tidy ####
RangeFile <- read.delim("Range For Simulation.rrng", colClasses = "character", header = FALSE)
RowsToSkip <- as.numeric(gsub("Number=", "", RangeFile[2,])) + 5
Ranges <- RangeFile %>% slice(RowsToSkip:n())
rm(RowsToSkip, RangeFile)
RangesDF <- data.frame()
i = 0
for(i in unique(str_count(Ranges$V1, ":") - 2)){
Elements <- c()
for(j in seq(1,i,1)){
Elements <- append(Elements,paste("Element",j))
}
ColumnNames <- c("Start", "End", "Volume",
Elements, "Color")
Ranges %>%
mutate(NumberIons = str_count(V1, ":") - 2) %>%
filter(NumberIons == i) %>%
separate(V1,
ColumnNames,
sep = " ")
RangesDF <- bind_rows(RangesDF,
Ranges %>%
mutate(NumberIons = str_count(V1, ":") - 2) %>%
filter(NumberIons == i) %>%
separate(V1,
ColumnNames,
sep = " ")
)
}
rm(ColumnNames, Elements,i, j)
#### Creat R-friendly range file ####
RangesDF2 <- cbind(
RangesDF %>%
mutate(Start = as.numeric(str_extract(Start,"[^=]+$")),
End = as.numeric(str_extract(End, "[^=]+$")),
Volume = gsub("Vol:", "", Volume),
Color = gsub("Color:", "", Color)) %>%
select(Start, End, Volume, Color),
RangesDF %>%
select(contains("Element")) %>%
unite("Ion") %>%
mutate(Ion = paste(gsub("1|Name|:|NA|_| ","",Ion)))
)
rm(Ranges, RangesDF)
#### Range pos####
Ion <- data.frame(matrix(NA,
nrow = nrow(SimulatedPos)))
for(i in seq(1,nrow(RangesDF2),1)){
Name <- RangesDF2$Ion[i]
Ion <<- cbind(
Ion,
SimulatedPos %>%
mutate(Name = ifelse(SimulatedPos$m > RangesDF2$Start[i] &
SimulatedPos$m < RangesDF2$End[i],
RangesDF2$Ion[i], NA)) %>%
select(Name))
}
Ion$Noise <- "Noise"
SimulatedPos$Ion <- apply(Ion, 1, function(x) na.omit(x)[1])
rm(i, Ion)
#### Plot one D conc plot ####
ROILength = max(SimulatedPos$z) - min(SimulatedPos$z)
OneDConcPlot <- SimulatedPos %>%
group_by(Distance = cut(z, breaks= seq(min(SimulatedPos$z), max(SimulatedPos$z), by = 0.1)),
Ion) %>%
summarise(Ioncount = n()) %>%
ungroup() %>%
spread(Ion, Ioncount) %>%
mutate(Distance = as.numeric(as.character((ceiling(ROILength))*(row_number()/n()))))
OneDConcPlot[is.na(OneDConcPlot)] <- 0
ggplot(OneDConcPlot) +
geom_point(aes(Distance, Fe))
max(OneDConcPlot$Fe)
GBtest <- data.frame()
for (Distance in seq(-1,0.9,0.1)) {
GBSection <- POSGenerator(AtomicDensity = 40,
XRange = c(-10, 10),
YRange = c(-10, 10),
ZRange = c(-Distance, -Distance+0.1),
CompositionTable = data.frame("Element" = c("Fe", "Ni", "P"),
"Abundance"= c(90.0-abs(Distance),
6.0+0.5*abs(Distance),
4.0+0.5*abs(Distance)),
"Mass" = c(28, 29, 15.5)))
GBtest <- rbind(GBtest, GBSection)
}
#### Create overall pos ####
SimulatedPos <- rbind(MatrixA, MatrixB, GBtest)
rm(MatrixA, MatrixB, GB)
#### Input RangeFile and Tidy ####
RangeFile <- read.delim("Range For Simulation.rrng", colClasses = "character", header = FALSE)
RowsToSkip <- as.numeric(gsub("Number=", "", RangeFile[2,])) + 5
Ranges <- RangeFile %>% slice(RowsToSkip:n())
rm(RowsToSkip, RangeFile)
RangesDF <- data.frame()
i = 0
for(i in unique(str_count(Ranges$V1, ":") - 2)){
Elements <- c()
for(j in seq(1,i,1)){
Elements <- append(Elements,paste("Element",j))
}
ColumnNames <- c("Start", "End", "Volume",
Elements, "Color")
Ranges %>%
mutate(NumberIons = str_count(V1, ":") - 2) %>%
filter(NumberIons == i) %>%
separate(V1,
ColumnNames,
sep = " ")
RangesDF <- bind_rows(RangesDF,
Ranges %>%
mutate(NumberIons = str_count(V1, ":") - 2) %>%
filter(NumberIons == i) %>%
separate(V1,
ColumnNames,
sep = " ")
)
}
rm(ColumnNames, Elements,i, j)
#### Creat R-friendly range file ####
RangesDF2 <- cbind(
RangesDF %>%
mutate(Start = as.numeric(str_extract(Start,"[^=]+$")),
End = as.numeric(str_extract(End, "[^=]+$")),
Volume = gsub("Vol:", "", Volume),
Color = gsub("Color:", "", Color)) %>%
select(Start, End, Volume, Color),
RangesDF %>%
select(contains("Element")) %>%
unite("Ion") %>%
mutate(Ion = paste(gsub("1|Name|:|NA|_| ","",Ion)))
)
rm(Ranges, RangesDF)
#### Range pos####
Ion <- data.frame(matrix(NA,
nrow = nrow(SimulatedPos)))
for(i in seq(1,nrow(RangesDF2),1)){
Name <- RangesDF2$Ion[i]
Ion <<- cbind(
Ion,
SimulatedPos %>%
mutate(Name = ifelse(SimulatedPos$m > RangesDF2$Start[i] &
SimulatedPos$m < RangesDF2$End[i],
RangesDF2$Ion[i], NA)) %>%
select(Name))
}
Ion$Noise <- "Noise"
SimulatedPos$Ion <- apply(Ion, 1, function(x) na.omit(x)[1])
rm(i, Ion)
#### Plot one D conc plot ####
ROILength = max(SimulatedPos$z) - min(SimulatedPos$z)
OneDConcPlot <- SimulatedPos %>%
group_by(Distance = cut(z, breaks= seq(min(SimulatedPos$z), max(SimulatedPos$z), by = 0.1)),
Ion) %>%
summarise(Ioncount = n()) %>%
ungroup() %>%
spread(Ion, Ioncount) %>%
mutate(Distance = as.numeric(as.character((ceiling(ROILength))*(row_number()/n()))))
OneDConcPlot[is.na(OneDConcPlot)] <- 0
max(OneDConcPlot$Fe)
ggplot(OneDConcPlot) +
geom_point(aes(Distance, Fe))
OneDConcPlot %>% file(Fe > 2000)
OneDConcPlot %>% filter(Fe > 2000)
seq(-1,0.9,0.1)
GBtest <- data.frame()
for (Distance in seq(-1,0.9,0.1)) {
GBSection <- POSGenerator(AtomicDensity = 40,
XRange = c(-10, 10),
YRange = c(-10, 10),
ZRange = c(Distance, Distance+0.1),
CompositionTable = data.frame("Element" = c("Fe", "Ni", "P"),
"Abundance"= c(90.0-abs(Distance),
6.0+0.5*abs(Distance),
4.0+0.5*abs(Distance)),
"Mass" = c(28, 29, 15.5)))
GBtest <- rbind(GBtest, GBSection)
}
#### Create overall pos ####
SimulatedPos <- rbind(MatrixA, MatrixB, GBtest)
rm(MatrixA, MatrixB, GB)
#### Input RangeFile and Tidy ####
RangeFile <- read.delim("Range For Simulation.rrng", colClasses = "character", header = FALSE)
RowsToSkip <- as.numeric(gsub("Number=", "", RangeFile[2,])) + 5
Ranges <- RangeFile %>% slice(RowsToSkip:n())
rm(RowsToSkip, RangeFile)
RangesDF <- data.frame()
i = 0
for(i in unique(str_count(Ranges$V1, ":") - 2)){
Elements <- c()
for(j in seq(1,i,1)){
Elements <- append(Elements,paste("Element",j))
}
ColumnNames <- c("Start", "End", "Volume",
Elements, "Color")
Ranges %>%
mutate(NumberIons = str_count(V1, ":") - 2) %>%
filter(NumberIons == i) %>%
separate(V1,
ColumnNames,
sep = " ")
RangesDF <- bind_rows(RangesDF,
Ranges %>%
mutate(NumberIons = str_count(V1, ":") - 2) %>%
filter(NumberIons == i) %>%
separate(V1,
ColumnNames,
sep = " ")
)
}
rm(ColumnNames, Elements,i, j)
#### Creat R-friendly range file ####
RangesDF2 <- cbind(
RangesDF %>%
mutate(Start = as.numeric(str_extract(Start,"[^=]+$")),
End = as.numeric(str_extract(End, "[^=]+$")),
Volume = gsub("Vol:", "", Volume),
Color = gsub("Color:", "", Color)) %>%
select(Start, End, Volume, Color),
RangesDF %>%
select(contains("Element")) %>%
unite("Ion") %>%
mutate(Ion = paste(gsub("1|Name|:|NA|_| ","",Ion)))
)
rm(Ranges, RangesDF)
#### Range pos####
Ion <- data.frame(matrix(NA,
nrow = nrow(SimulatedPos)))
for(i in seq(1,nrow(RangesDF2),1)){
Name <- RangesDF2$Ion[i]
Ion <<- cbind(
Ion,
SimulatedPos %>%
mutate(Name = ifelse(SimulatedPos$m > RangesDF2$Start[i] &
SimulatedPos$m < RangesDF2$End[i],
RangesDF2$Ion[i], NA)) %>%
select(Name))
}
Ion$Noise <- "Noise"
SimulatedPos$Ion <- apply(Ion, 1, function(x) na.omit(x)[1])
rm(i, Ion)
#### Plot one D conc plot ####
ROILength = max(SimulatedPos$z) - min(SimulatedPos$z)
OneDConcPlot <- SimulatedPos %>%
group_by(Distance = cut(z, breaks= seq(min(SimulatedPos$z), max(SimulatedPos$z), by = 0.1)),
Ion) %>%
summarise(Ioncount = n()) %>%
ungroup() %>%
spread(Ion, Ioncount) %>%
mutate(Distance = as.numeric(as.character((ceiling(ROILength))*(row_number()/n()))))
OneDConcPlot[is.na(OneDConcPlot)] <- 0
ggplot(OneDConcPlot) +
geom_point(aes(Distance, Fe))
#### Create overall pos ####
SimulatedPos <- rbind(MatrixA, MatrixB, GBtest)
MatrixA <- POSGenerator(AtomicDensity = 40,
XRange = c(-10, 10),
YRange = c(-10, 10),
ZRange = c(-10, -1),
CompositionTable = data.frame("Element" = c("Fe", "Ni", "P"),
"Abundance"= c(98.9,1.0,0.1),
"Mass" = c(28, 29, 15.5)))
MatrixB <- POSGenerator(AtomicDensity = 40,
XRange = c(-10, 10),
YRange = c(-10, 10),
ZRange = c(1, 10),
CompositionTable = data.frame("Element" = c("Fe", "Ni", "P"),
"Abundance"= c(98.9,1.0,0.1),
"Mass" = c(28, 29, 15.5)))
SimulatedPos <- rbind(MatrixA, MatrixB, GBtest)
rm(MatrixA, MatrixB, GB)
#### Input RangeFile and Tidy ####
RangeFile <- read.delim("Range For Simulation.rrng", colClasses = "character", header = FALSE)
RowsToSkip <- as.numeric(gsub("Number=", "", RangeFile[2,])) + 5
Ranges <- RangeFile %>% slice(RowsToSkip:n())
rm(RowsToSkip, RangeFile)
RangesDF <- data.frame()
i = 0
for(i in unique(str_count(Ranges$V1, ":") - 2)){
Elements <- c()
for(j in seq(1,i,1)){
Elements <- append(Elements,paste("Element",j))
}
ColumnNames <- c("Start", "End", "Volume",
Elements, "Color")
Ranges %>%
mutate(NumberIons = str_count(V1, ":") - 2) %>%
filter(NumberIons == i) %>%
separate(V1,
ColumnNames,
sep = " ")
RangesDF <- bind_rows(RangesDF,
Ranges %>%
mutate(NumberIons = str_count(V1, ":") - 2) %>%
filter(NumberIons == i) %>%
separate(V1,
ColumnNames,
sep = " ")
)
}
rm(ColumnNames, Elements,i, j)
#### Creat R-friendly range file ####
RangesDF2 <- cbind(
RangesDF %>%
mutate(Start = as.numeric(str_extract(Start,"[^=]+$")),
End = as.numeric(str_extract(End, "[^=]+$")),
Volume = gsub("Vol:", "", Volume),
Color = gsub("Color:", "", Color)) %>%
select(Start, End, Volume, Color),
RangesDF %>%
select(contains("Element")) %>%
unite("Ion") %>%
mutate(Ion = paste(gsub("1|Name|:|NA|_| ","",Ion)))
)
rm(Ranges, RangesDF)
#### Range pos####
Ion <- data.frame(matrix(NA,
nrow = nrow(SimulatedPos)))
for(i in seq(1,nrow(RangesDF2),1)){
Name <- RangesDF2$Ion[i]
Ion <<- cbind(
Ion,
SimulatedPos %>%
mutate(Name = ifelse(SimulatedPos$m > RangesDF2$Start[i] &
SimulatedPos$m < RangesDF2$End[i],
RangesDF2$Ion[i], NA)) %>%
select(Name))
}
Ion$Noise <- "Noise"
SimulatedPos$Ion <- apply(Ion, 1, function(x) na.omit(x)[1])
rm(i, Ion)
#### Plot one D conc plot ####
ROILength = max(SimulatedPos$z) - min(SimulatedPos$z)
OneDConcPlot <- SimulatedPos %>%
group_by(Distance = cut(z, breaks= seq(min(SimulatedPos$z), max(SimulatedPos$z), by = 0.1)),
Ion) %>%
summarise(Ioncount = n()) %>%
ungroup() %>%
spread(Ion, Ioncount) %>%
mutate(Distance = as.numeric(as.character((ceiling(ROILength))*(row_number()/n()))))
OneDConcPlot[is.na(OneDConcPlot)] <- 0
ggplot(OneDConcPlot) +
geom_point(aes(Distance, Fe))
ggplot(OneDConcPlot) +
geom_point(aes(Distance, Ni))
ggplot(OneDConcPlot) +
geom_point(aes(Distance, P))
