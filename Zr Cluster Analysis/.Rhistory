show.legend = FALSE) +
geom_errorbarR(aes(Rmax = MnMean + MnErr,
Rmin = MnMean - MnErr),
show.legend = FALSE) +
geom_errorbarT(aes(Tmax = SiMean + SiErr,
Tmin = SiMean - SiErr),
show.legend = FALSE) +
myTheme() +
labs(x = "Ni", y = "Si", z ="Mn", colour = "Nucleation Site") +
theme(legend.position="bottom")  +
guides(col = guide_legend(nrow = 2)) +
scale_shape_manual(values=seq(0,15)) +
scale_colour_manual(values = SetTypeColors,
drop=TRUE) +
ggsave("C:/Users/Ben/Documents/Post Doc/Papers/Ox UCSB CAES/RX12 Cluster Composition Vs Location.png", width = 5, height = 4,
dpi = 1200)
require(magick)
# Powershell command to remove all filename before and including Expression
# get-childitem *.Tiff | rename-item -newname { $_.Name -replace '(?s)^.*EXPRESSION', "" }
# get-childitem *.Tiff | rename-item -newname { $_.Name -replace '(?s)^.*ds1_Ca Ka_', "" }
# Create blank image to fill in where images are missing
BlankImage <- image_read("C:/Users/Ben/Documents/Post Doc/Papers/Phil Gopon/Images/Ca/Ca Ka (Sp 3)_item4_1_1.Tiff")
BlankImage <- image_modulate(BlankImage, brightness = 0)
BlankImage <- image_fill(BlankImage, "black")
BlankImage
ImageCreatorAndMissingImageIdentifier <-
function(ElementName, ElementFilePath){
MissingImagesTotal <- data.frame()
CreateJoinedImage <- function(Row){
ListOfFiles = c()
for(i in seq(1,40,1)){
ListOfFiles = append(ListOfFiles,
c(paste0(ElementFilePath,i,"_",Row,".Tiff")))
}
MissingImagesRow <- data.frame()
i = 1
for(File in ListOfFiles){
if(file.exists(File) == TRUE){
assign(paste0("ColumnNumber",i),image_read(File))
}
else{
assign(paste0("ColumnNumber",i),BlankImage)
MissingImagesTotal <- rbind(MissingImagesTotal,c(Row,i))
}
i = i + 1
}
MissingImagesTotal <<- rbind(MissingImagesTotal,MissingImagesRow)
MissingImagesTotal <<- rbind(MissingImagesTotal, c(0,0))
AllPics <- c(ColumnNumber1, ColumnNumber2, ColumnNumber3, ColumnNumber4, ColumnNumber5, ColumnNumber6, ColumnNumber7,
ColumnNumber8, ColumnNumber9, ColumnNumber10, ColumnNumber11, ColumnNumber12, ColumnNumber13, ColumnNumber14,
ColumnNumber15, ColumnNumber16, ColumnNumber17, ColumnNumber18, ColumnNumber19, ColumnNumber20, ColumnNumber21,
ColumnNumber22, ColumnNumber23, ColumnNumber24, ColumnNumber25, ColumnNumber26, ColumnNumber27, ColumnNumber28,
ColumnNumber29, ColumnNumber30, ColumnNumber31, ColumnNumber32, ColumnNumber33, ColumnNumber34, ColumnNumber35,
ColumnNumber36, ColumnNumber37, ColumnNumber38, ColumnNumber39, ColumnNumber40)
RowImage <<- image_append(image_scale(AllPics))
}
# Create appended image
Final <- image_append(image_scale(c(
CreateJoinedImage(1),
CreateJoinedImage(2),
CreateJoinedImage(3),
CreateJoinedImage(4),
CreateJoinedImage(5),
CreateJoinedImage(6),
CreateJoinedImage(7),
CreateJoinedImage(8),
CreateJoinedImage(9),
CreateJoinedImage(10),
CreateJoinedImage(11),
CreateJoinedImage(12),
CreateJoinedImage(13),
CreateJoinedImage(14),
CreateJoinedImage(15),
CreateJoinedImage(16),
CreateJoinedImage(17),
CreateJoinedImage(18),
CreateJoinedImage(19),
CreateJoinedImage(20),
CreateJoinedImage(21),
CreateJoinedImage(22),
CreateJoinedImage(23),
CreateJoinedImage(24),
CreateJoinedImage(25),
CreateJoinedImage(26),
CreateJoinedImage(27),
CreateJoinedImage(28),
CreateJoinedImage(29),
CreateJoinedImage(30),
CreateJoinedImage(31),
CreateJoinedImage(32),
CreateJoinedImage(33),
CreateJoinedImage(34),
CreateJoinedImage(35),
CreateJoinedImage(36),
CreateJoinedImage(37),
CreateJoinedImage(38),
CreateJoinedImage(39),
CreateJoinedImage(40))),
stack = TRUE)
# Export appended image as png
image_write(Final,
paste0("C:/Users/Ben/Documents/Post Doc/Papers/Phil Gopon/Images/AppendedImages/",
ElementName,
"AppendedImage.png"),
format = "png")
# Export list of files that are missing
colnames(MissingImagesTotal) <- c("Row","Column")
write.csv(MissingImagesTotal,
paste0("C:/Users/Ben/Documents/Post Doc/Papers/Phil Gopon/Images/AppendedImages/",
ElementName,
"_Missing_Images.csv"),
row.names = FALSE
)
}
FilePaths <- c(
"C:/Users/Ben/Documents/Post Doc/Papers/Phil Gopon/Images/Al/Al Ka EDS_item8_1_1.Tiff",
"C:/Users/Ben/Documents/Post Doc/Papers/Phil Gopon/Images/BSE/BSE Z_item1_1_1.Tiff",
"C:/Users/Ben/Documents/Post Doc/Papers/Phil Gopon/Images/Ca/Ca Ka (Sp 3)_item4_1_1.Tiff",
"C:/Users/Ben/Documents/Post Doc/Papers/Phil Gopon/Images/Cr/Cr Ka (Sp 4)_item5_1_1.Tiff",
"C:/Users/Ben/Documents/Post Doc/Papers/Phil Gopon/Images/Fe/Fe Ka (Sp 5)_item6_1_1.Tiff",
"C:/Users/Ben/Documents/Post Doc/Papers/Phil Gopon/Images/Mg/Mg Ka (Sp 1)_item2_1_1.Tiff",
"C:/Users/Ben/Documents/Post Doc/Papers/Phil Gopon/Images/Na/Na Ka EDS_item7_1_1.Tiff",
"C:/Users/Ben/Documents/Post Doc/Papers/Phil Gopon/Images/Si/Si Ka EDS_item9_1_1.Tiff",
"C:/Users/Ben/Documents/Post Doc/Papers/Phil Gopon/Images/Ti/Ti Ka (Sp 2)_item3_1_1.Tiff"
)
#ElementName <- unlist(strsplit(basename(FilePaths[1])," "))[1]
for(Elements in seq(1,length(FilePaths),1)){
#ElementName <- unlist(strsplit(basename(FilePaths[Elements])," "))[1]
#FileName <- paste0(unlist(strsplit(FilePaths[Elements],"_1_1"))[1],"_")
ImageCreatorAndMissingImageIdentifier(
unlist(strsplit(basename(FilePaths[Elements])," "))[1],
paste0(unlist(strsplit(FilePaths[Elements],"_1_1"))[1],"_")
)
print(unlist(strsplit(basename(FilePaths[Elements])," "))[1])
}
require(magick)
# Powershell command to remove all filename before and including Expression
# get-childitem *.Tiff | rename-item -newname { $_.Name -replace '(?s)^.*EXPRESSION', "" }
# get-childitem *.Tiff | rename-item -newname { $_.Name -replace '(?s)^.*ds1_Ca Ka_', "" }
# Create blank image to fill in where images are missing
BlankImage <- image_read("C:/Users/Ben/Documents/Post Doc/Papers/Phil Gopon/Images/Ca/Ca Ka (Sp 3)_item4_1_1.Tiff")
BlankImage <- image_modulate(BlankImage, brightness = 0)
BlankImage <- image_fill(BlankImage, "black")
ImageCreatorAndMissingImageIdentifier <-
function(ElementName, ElementFilePath){
MissingImagesTotal <- data.frame()
CreateJoinedImage <- function(Row){
ListOfFiles = c()
for(i in seq(1,40,1)){
ListOfFiles = append(ListOfFiles,
c(paste0(ElementFilePath,i,"_",Row,".Tiff")))
}
MissingImagesRow <- data.frame()
i = 1
for(File in ListOfFiles){
if(file.exists(File) == TRUE){
assign(paste0("ColumnNumber",i),image_read(File))
}
else{
assign(paste0("ColumnNumber",i),BlankImage)
MissingImagesTotal <- rbind(MissingImagesTotal,c(Row,i))
}
i = i + 1
}
MissingImagesTotal <<- rbind(MissingImagesTotal,MissingImagesRow)
MissingImagesTotal <<- rbind(MissingImagesTotal, c(0,0))
AllPics <- c(ColumnNumber1, ColumnNumber2, ColumnNumber3, ColumnNumber4, ColumnNumber5, ColumnNumber6, ColumnNumber7,
ColumnNumber8, ColumnNumber9, ColumnNumber10, ColumnNumber11, ColumnNumber12, ColumnNumber13, ColumnNumber14,
ColumnNumber15, ColumnNumber16, ColumnNumber17, ColumnNumber18, ColumnNumber19, ColumnNumber20, ColumnNumber21,
ColumnNumber22, ColumnNumber23, ColumnNumber24, ColumnNumber25, ColumnNumber26, ColumnNumber27, ColumnNumber28,
ColumnNumber29, ColumnNumber30, ColumnNumber31, ColumnNumber32, ColumnNumber33, ColumnNumber34, ColumnNumber35,
ColumnNumber36, ColumnNumber37, ColumnNumber38, ColumnNumber39, ColumnNumber40)
RowImage <<- image_append(image_scale(AllPics))
}
# Create appended image
Final <- image_append(image_scale(c(
CreateJoinedImage(1),
CreateJoinedImage(2),
CreateJoinedImage(3),
CreateJoinedImage(4),
CreateJoinedImage(5),
CreateJoinedImage(6),
CreateJoinedImage(7),
CreateJoinedImage(8),
CreateJoinedImage(9),
CreateJoinedImage(10),
CreateJoinedImage(11),
CreateJoinedImage(12),
CreateJoinedImage(13),
CreateJoinedImage(14),
CreateJoinedImage(15),
CreateJoinedImage(16),
CreateJoinedImage(17),
CreateJoinedImage(18),
CreateJoinedImage(19),
CreateJoinedImage(20),
CreateJoinedImage(21),
CreateJoinedImage(22),
CreateJoinedImage(23),
CreateJoinedImage(24),
CreateJoinedImage(25),
CreateJoinedImage(26),
CreateJoinedImage(27),
CreateJoinedImage(28),
CreateJoinedImage(29),
CreateJoinedImage(30),
CreateJoinedImage(31),
CreateJoinedImage(32),
CreateJoinedImage(33),
CreateJoinedImage(34),
CreateJoinedImage(35),
CreateJoinedImage(36),
CreateJoinedImage(37),
CreateJoinedImage(38),
CreateJoinedImage(39),
CreateJoinedImage(40))),
stack = TRUE)
# Export appended image as png
image_write(Final,
paste0("C:/Users/Ben/Documents/Post Doc/Papers/Phil Gopon/Images/AppendedImages/",
ElementName,
"AppendedImage.png"),
format = "png")
# Export list of files that are missing
colnames(MissingImagesTotal) <- c("Row","Column")
write.csv(MissingImagesTotal,
paste0("C:/Users/Ben/Documents/Post Doc/Papers/Phil Gopon/Images/AppendedImages/",
ElementName,
"_Missing_Images.csv"),
row.names = FALSE
)
}
FilePaths <- c(
"C:/Users/Ben/Documents/Post Doc/Papers/Phil Gopon/Images/Al/Al Ka EDS_item8_1_1.Tiff",
"C:/Users/Ben/Documents/Post Doc/Papers/Phil Gopon/Images/BSE/BSE Z_item1_1_1.Tiff",
"C:/Users/Ben/Documents/Post Doc/Papers/Phil Gopon/Images/Ca/Ca Ka (Sp 3)_item4_1_1.Tiff",
"C:/Users/Ben/Documents/Post Doc/Papers/Phil Gopon/Images/Cr/Cr Ka (Sp 4)_item5_1_1.Tiff",
"C:/Users/Ben/Documents/Post Doc/Papers/Phil Gopon/Images/Fe/Fe Ka (Sp 5)_item6_1_1.Tiff",
"C:/Users/Ben/Documents/Post Doc/Papers/Phil Gopon/Images/Mg/Mg Ka (Sp 1)_item2_1_1.Tiff",
"C:/Users/Ben/Documents/Post Doc/Papers/Phil Gopon/Images/Na/Na Ka EDS_item7_1_1.Tiff",
"C:/Users/Ben/Documents/Post Doc/Papers/Phil Gopon/Images/Si/Si Ka EDS_item9_1_1.Tiff",
"C:/Users/Ben/Documents/Post Doc/Papers/Phil Gopon/Images/Ti/Ti Ka (Sp 2)_item3_1_1.Tiff"
)
#ElementName <- unlist(strsplit(basename(FilePaths[1])," "))[1]
for(Elements in seq(1,length(FilePaths),1)){
#ElementName <- unlist(strsplit(basename(FilePaths[Elements])," "))[1]
#FileName <- paste0(unlist(strsplit(FilePaths[Elements],"_1_1"))[1],"_")
ImageCreatorAndMissingImageIdentifier(
unlist(strsplit(basename(FilePaths[Elements])," "))[1],
paste0(unlist(strsplit(FilePaths[Elements],"_1_1"))[1],"_")
)
print(unlist(strsplit(basename(FilePaths[Elements])," "))[1])
}
20*32*pi/3
getwd()
gsub("\\\\","/",getwd())
gsub("\\\\","/","C:\Users\Ben\Documents")
gsub("\\\\","/","C:\\Users\\Ben\\Documents")
readClipboard()
readClipboard()
Test3 <- read.csv("C:\\Users\\Ben\\Documents\\Post Doc\\Papers\\Alpha Hull\\AlphaHullMethodology\\Paper\\ComparisonOfSampling20timesConvexHULL.csv")
Test3 %>% filter(Sampling.Fraction == 0.005 & Alpha..NND. == 2)
library(tidyverse)
Test3 %>% filter(Sampling.Fraction == 0.005 & Alpha..NND. == 2)
unique(Test3$Alpha..NND.)
unique(Test3$Sampling.Fraction)
Test3 %>% filter(Sampling.Fraction == 0.005 & Alpha..NND. == "alpha = 2 x max(NND)"
)
Test3 %>% filter(Sampling.Fraction == 0.005 & Alpha..NND. == "alpha = 2 x max(NND)")
(Test3 %>% filter(Sampling.Fraction == 0.005 & Alpha..NND. == "alpha = 2 x max(NND)"))$Time..s.
mean((Test3 %>% filter(Sampling.Fraction == 0.005 & Alpha..NND. == "alpha = 2 x max(NND)"))$Time..s.))
mean((Test3 %>% filter(Sampling.Fraction == 0.005 & Alpha..NND. == "alpha = 2 x max(NND)"))$Time..s.)
mean((Test3 %>% filter(Sampling.Fraction == 0.005 & Alpha..NND. == "alpha = 2 x max(NND)"))$Number.of.Edge.Clusters)
ImportClusterInfo <- read.csv("C:\\Users\\Ben\\Documents\\Post Doc\\Papers\\Alpha Hull\\AlphaHullMethodology\\Paper\\Alloy C Edge Clusters Identified Convex.csv",   #FileName
header =TRUE,
sep =",",
quote="\"",
check.names=F,
strip.white=TRUE
)
unique(ImportClusterInfo$Run)
ImportClusterInfo %>% filter(Run == "7522 - Carbide")
ImportClusterInfo %>% filter(Run == "7522 - Carbide" & !is.na(AlphaHullEdge))
nrow(ImportClusterInfo %>% filter(Run == "7522 - Carbide" & !is.na(AlphaHullEdge)))
nrow(ImportClusterInfo %>% filter(Run == "7542 - Matrix" & !is.na(AlphaHullEdge)))
unique(ImportClusterInfo$Run)
nrow(ImportClusterInfo %>% filter(Run == "7728" & !is.na(AlphaHullEdge)))
100*0.3/2.4
ImportClusterInfo <- read.csv("C:\\Users\\Ben\\Documents\\Post Doc\\Papers\\Alpha Hull\\AlphaHullMethodology\\Paper\\Alloy C Edge Clusters Identified Convex.csv",   #FileName
header =TRUE,
sep =",",
quote="\"",
check.names=F,
strip.white=TRUE
)
ClusterInfoCheck <- ImportClusterInfo %>% transmute(
"Ranged Ions" = `Ranged Ions`,
"Total Number Ions" = `Si Count` + `Fe Count` + `Cu Count` + `Ni Count` + `Fm Count` +
`Mn Count` + `Mo Count` + `C Count` + `Cr Count` + `FeC Count` +
`P Count` + `C2 Count` + `C3 Count` + `C4 Count` + `MoC Count`,
Check = `Ranged Ions` - `Total Number Ions`
)
CorrectedCountEachIon <- ImportClusterInfo %>%
mutate(
Si = `Si Count`,
Fe = `Fe Count`+ `FeC Count`,
Cu = `Cu Count`,
Ni = `Ni Count` + `Fm Count`,
Mn = `Mn Count`,
Mo = `Mo Count` + `MoC Count`,
C = `C Count`+ (2*`C2 Count`) + (3*`C3 Count`) + (4*`C4 Count`) + `MoC Count`+ `FeC Count`,
Cr = `Cr Count`,
P = `P Count`,
TotalCorrCount = Si + Fe + Cu + Ni + Mn + Mo + C + Cr + P,
TotalCorrCountNoFe = TotalCorrCount - Fe,
OtherCount = TotalCorrCountNoFe - (Si + Cu + Ni + Mn + P)
)
#View(CorrectedCountEachIon)
ClusterCompositions <- CorrectedCountEachIon %>%
transmute(
"Alloy" = `Alloy`,
"Ageing Temp (C)" = `Ageing Temp (C)`,
"Ageing Time (h)" =`Ageing Time (h)`,
"Fluence (ncm2)" = `Fluence (ncm2)`,
"Flux (ncm2s-1)" = `Flux (ncm2s-1)`,
"Irr Temp (C)" = `Irr Temp (C)`,
"Run" = `Run`,
"LEAP" = `LEAP`,
"AlphaHullEdge" = `AlphaHullEdge`,
"Efficiency" = case_when(
LEAP == 5000 ~ 0.52,
LEAP == 4000 ~ 0.37,
LEAP == 3000 ~ 0.37),
"Ions" = `Ions`,
"Dmax (nm)" = `Dmax (nm)`,
"Order" = `Order`,
"Nmin" = `Nmin`,
"L (nm)" = `L (nm)`,
"E (nm)" = `E (nm)`,
"TotalNumberIonsInRun" = `TotalNumberIonsInRun`,
"ClusterID" = `ClusterID`,
ClusterNumber = as.numeric(gsub("Cluster ","",ClusterID)),
"Type" = `Type`,
TotalCorrCount = TotalCorrCount + (ClusterNumber/10000),
TotalCorrCountNoFe = TotalCorrCountNoFe,
EstimatedSize = (TotalCorrCount*(1/Efficiency)/85.49),
EstimatedSizeNoFe = (TotalCorrCountNoFe*(1/Efficiency)/85.49),
Si = (100 *(Si/TotalCorrCountNoFe)),
Fe = (100 *(Fe/TotalCorrCount)),
Cu = (100 *(Cu/TotalCorrCountNoFe)),
Ni = (100 *(Ni/TotalCorrCountNoFe)),
Mn = (100 *(Mn/TotalCorrCountNoFe)),
P = (100 *(P/TotalCorrCountNoFe)),
Other = (100 *(OtherCount/TotalCorrCountNoFe))
)
a <- ClusterCompositions %>%
filter(Alloy == "C") %>%
filter(Type == "Homogeneous")
a$AlphaHullEdge <- factor(a$AlphaHullEdge, levels = c("False","Edge"))
a$AlphaHullEdge[is.na(a$AlphaHullEdge)] <- c("False")
a %>% group_by(AlphaHullEdge) %>% summarise(mean = mean(TotalCorrCountNoFe), SEM = sd(TotalCorrCountNoFe)/sqrt(length(TotalCorrCount)))
a %>%
gather(Element, Value, Fe, Cu, Ni, Mn, P, Si) %>%
group_by(AlphaHullEdge, Element) %>%
summarise(mean = mea
ImportClusterInfo <- read.csv("C:\\Users\\Ben\\Documents\\Post Doc\\Papers\\Alpha Hull\\AlphaHullMethodology\\Paper\\Alloy C Edge Clusters Identified Convex.csv",   #FileName
header =TRUE,
sep =",",
quote="\"",
check.names=F,
strip.white=TRUE
)
ClusterInfoCheck <- ImportClusterInfo %>% transmute(
"Ranged Ions" = `Ranged Ions`,
"Total Number Ions" = `Si Count` + `Fe Count` + `Cu Count` + `Ni Count` + `Fm Count` +
`Mn Count` + `Mo Count` + `C Count` + `Cr Count` + `FeC Count` +
`P Count` + `C2 Count` + `C3 Count` + `C4 Count` + `MoC Count`,
Check = `Ranged Ions` - `Total Number Ions`
)
CorrectedCountEachIon <- ImportClusterInfo %>%
mutate(
Si = `Si Count`,
Fe = `Fe Count`+ `FeC Count`,
Cu = `Cu Count`,
Ni = `Ni Count` + `Fm Count`,
Mn = `Mn Count`,
Mo = `Mo Count` + `MoC Count`,
C = `C Count`+ (2*`C2 Count`) + (3*`C3 Count`) + (4*`C4 Count`) + `MoC Count`+ `FeC Count`,
Cr = `Cr Count`,
P = `P Count`,
TotalCorrCount = Si + Fe + Cu + Ni + Mn + Mo + C + Cr + P,
TotalCorrCountNoFe = TotalCorrCount - Fe,
OtherCount = TotalCorrCountNoFe - (Si + Cu + Ni + Mn + P)
)
#View(CorrectedCountEachIon)
ClusterCompositions <- CorrectedCountEachIon %>%
transmute(
"Alloy" = `Alloy`,
"Ageing Temp (C)" = `Ageing Temp (C)`,
"Ageing Time (h)" =`Ageing Time (h)`,
"Fluence (ncm2)" = `Fluence (ncm2)`,
"Flux (ncm2s-1)" = `Flux (ncm2s-1)`,
"Irr Temp (C)" = `Irr Temp (C)`,
"Run" = `Run`,
"LEAP" = `LEAP`,
"AlphaHullEdge" = `AlphaHullEdge`,
"Efficiency" = case_when(
LEAP == 5000 ~ 0.52,
LEAP == 4000 ~ 0.37,
LEAP == 3000 ~ 0.37),
"Ions" = `Ions`,
"Dmax (nm)" = `Dmax (nm)`,
"Order" = `Order`,
"Nmin" = `Nmin`,
"L (nm)" = `L (nm)`,
"E (nm)" = `E (nm)`,
"TotalNumberIonsInRun" = `TotalNumberIonsInRun`,
"ClusterID" = `ClusterID`,
ClusterNumber = as.numeric(gsub("Cluster ","",ClusterID)),
"Type" = `Type`,
TotalCorrCount = TotalCorrCount + (ClusterNumber/10000),
TotalCorrCountNoFe = TotalCorrCountNoFe,
EstimatedSize = (TotalCorrCount*(1/Efficiency)/85.49),
EstimatedSizeNoFe = (TotalCorrCountNoFe*(1/Efficiency)/85.49),
Si = (100 *(Si/TotalCorrCountNoFe)),
Fe = (100 *(Fe/TotalCorrCount)),
Cu = (100 *(Cu/TotalCorrCountNoFe)),
Ni = (100 *(Ni/TotalCorrCountNoFe)),
Mn = (100 *(Mn/TotalCorrCountNoFe)),
P = (100 *(P/TotalCorrCountNoFe)),
Other = (100 *(OtherCount/TotalCorrCountNoFe))
)
a <- ClusterCompositions %>%
filter(Alloy == "C") %>%
filter(Type == "Homogeneous")
a$AlphaHullEdge <- factor(a$AlphaHullEdge, levels = c("False","Edge"))
a$AlphaHullEdge[is.na(a$AlphaHullEdge)] <- c("False")
a %>% group_by(AlphaHullEdge) %>% summarise(mean = mean(TotalCorrCountNoFe), SEM = sd(TotalCorrCountNoFe)/sqrt(length(TotalCorrCount)))
a %>%
gather(Element, Value, Fe, Cu, Ni, Mn, P, Si) %>%
group_by(AlphaHullEdge, Element) %>%
summarise(mean = mean(Value), SEM = sd(Value)/sqrt(length(Value)))
Run7490 <- ClusterCompositions %>%
filter(Run == "7490")
VolumeFraction = 100*sum(Run7490$TotalCorrCountNoFe)/unique(Run7490$TotalNumberIonsInRun)
Volume = (unique(Run7490$TotalNumberIonsInRun) * (1/0.37))*(1/85.49)*(10^-27)
NdEdgeAccountedFor = (nrow(Run7490)-(0.5*nrow(Run7490 %>% filter(AlphaHullEdge == "Edge"))))/(Volume)
NdEdgeNotAccountedFor = (nrow(Run7490))/(Volume)
SizeEdgeAccountedFor = mean((Run7490 %>%
filter(is.na(AlphaHullEdge)))$TotalCorrCountNoFe)
SizeEdgeNotAccountedFor = mean((Run7490 %>%
filter(!is.na(AlphaHullEdge)))$TotalCorrCountNoFe)
SizeEdgeAccountedFor
SizeEdgeNotAccountedFor
a <- ClusterCompositions %>%
filter(Alloy == "C") %>%
filter(Type == "Homogeneous" & Run == "7490")
a %>% group_by(AlphaHullEdge) %>% summarise(mean = mean(TotalCorrCountNoFe), SEM = sd(TotalCorrCountNoFe)/sqrt(length(TotalCorrCount)))
a$AlphaHullEdge <- factor(a$AlphaHullEdge, levels = c("False","Edge"))
a$AlphaHullEdge[is.na(a$AlphaHullEdge)] <- c("False")
a %>% group_by(AlphaHullEdge) %>% summarise(mean = mean(TotalCorrCountNoFe), SEM = sd(TotalCorrCountNoFe)/sqrt(length(TotalCorrCount)))
Run7490 <- ClusterCompositions
100*sum(Run7490$TotalCorrCountNoFe)/unique(Run7490$TotalNumberIonsInRun)
length(unique(ClusterCompositions$Run))
0.214^3
1/0.214^3
8/0.214^3
8/(0.214^3)
E-21/E-23
10^-21/10^-23
9.27+2.66
570/11.93
48*8000
*0.52
384000*0.52
B = 546
J = 437
B
J
Cost = 357.9
Units = 1048.578
Cost * Units
Cost * Units/(B+J)
(Cost * Units/(B+J))*B
(Cost * Units/(B+J))*J
2084.5+1668.36
1 + 1
source('~/GitHub/APT-Data-Analysis/Zr Cluster Analysis/Zr Cluster Analysis.R')
library(tidyverse)
install.packages("tidyverse")
install.packages(c("alphashape3d", "dplyr", "geometry", "spatstat", "tidyverse"))
install.packages(c("InterpretMSSpectrum", "PeriodicTable", "rlang"))
source('~/GitHub/APT-Data-Analysis/Zr Cluster Analysis/Zr Cluster Analysis.R')
source("https://bioconductor.org/biocLite.R")
biocLite("Rdisop")
source("http://bioconductor.org/biocLite.R")
biocLite("Rdisop")
source("https://bioconductor.org/biocLite.R")
biocLite("Rdisop")
BiocManager::install(version = "3.9")
library(BiocManager)
install.packages("BiocManager")
library(InterpretMSSpectrum)
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install()
library(InterpretMSSpectrum)
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("Rdisop")
library(InterpretMSSpectrum)
source('~/GitHub/APT-Data-Analysis/Zr Cluster Analysis/Zr Cluster Analysis.R')
